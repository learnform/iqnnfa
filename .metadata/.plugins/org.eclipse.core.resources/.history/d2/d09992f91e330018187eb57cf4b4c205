package com.dr.service.member.impl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.logging.Logger;

import com.dr.common.ConfigUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.dr.common.SmsSendUtil;
import com.dr.common.Utils;
import com.dr.dao.activity.DrActivityParameterDAO;
import com.dr.dao.activity.DrCouponsIssuedRulesDAO;
import com.dr.dao.activity.DrMemberFavourableDAO;
import com.dr.dao.cpa.DrChannelInfoDAO;
import com.dr.dao.member.DrMemberBaseInfoDAO;
import com.dr.dao.member.DrMemberDAO;
import com.dr.dao.member.DrMemberFundsDAO;
import com.dr.dao.member.DrMemberMsgDAO;
import com.dr.dao.member.DrMemberRecommendedDAO;
import com.dr.model.activity.DrActivityParameter;
import com.dr.model.activity.DrCouponsIssuedRules;
import com.dr.model.activity.DrMemberFavourable;
import com.dr.model.cpa.DrChannelInfo;
import com.dr.model.member.DrMember;
import com.dr.model.member.DrMemberBaseInfo;
import com.dr.model.member.DrMemberFunds;
import com.dr.model.member.DrMemberMsg;
import com.dr.model.member.DrMemberRecommended;
import com.dr.model.system.SysMessageLog;
import com.dr.service.member.DrMemberService;
import com.dr.service.system.SysMessageLogService;
import com.dr.service.system.impl.RedisClientTemplate;

@Service
@Transactional
public class DrMemberServiceImpl implements DrMemberService {
    private org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    @Autowired
    public DrMemberDAO drMemberDAO;
    @Autowired
    public DrMemberFundsDAO drMemberFundsDAO;
    @Autowired
    public DrMemberBaseInfoDAO drMemberBaseInfoDAO;
    @Autowired
    private DrActivityParameterDAO drActivityParameterDAO;
    @Autowired
    private DrMemberFavourableDAO drMemberFavourableDAO;
    @Autowired
    private SysMessageLogService sysMessageLogService;
    @Autowired
    private DrMemberRecommendedDAO drMemberRecommendedDAO;
    @Autowired
    private RedisClientTemplate redisClientTemplate;
    @Autowired
    private DrChannelInfoDAO drChannelInfoDAO;
    @Autowired
    private DrCouponsIssuedRulesDAO drCouponsIssuedRulesDAO;
    @Autowired
    private DrMemberMsgDAO drMemberMsgDAO;

    @Override
    public DrMember selectDrMemberByMobilephone(String mobilephone) {
        return drMemberDAO.selectDrMemberByMobilephone(mobilephone, ConfigUtil.RELEASE_TIME);
    }

    @Override
    public void insertMember(DrMemberBaseInfo baseinfo, DrMember member, Integer rid,String userid,String extra,String sign) throws Exception {
        String recommCode = getRecommCode();
        member.setRecommCodes(recommCode);
        drMemberDAO.insertDrMember(member);
        //生成会员统计数据
        BigDecimal defmount = new BigDecimal(0);
        //生成会员资金数据
        DrMemberFunds mf = new DrMemberFunds();
        mf.setUid(member.getUid());
        mf.setBalance(defmount);
        mf.setFreeze(defmount);
        mf.setWprincipal(defmount);
        mf.setWinterest(defmount);
        mf.setWpenalty(defmount);
        mf.setCarryCount(defmount);
        mf.setCrushCount(defmount);
        drMemberFundsDAO.insertDrMemberFunds(mf);

        //个人信息
        baseinfo.setUid(member.getUid());
        baseinfo.setSex(null);
        baseinfo.setAddTime(new Date());
        drMemberBaseInfoDAO.insertDrMemberBaseInfo(baseinfo);

        //推荐人
        DrMemberRecommended recommended = new DrMemberRecommended(member.getUid(), rid, null, null, null, null);
        drMemberRecommendedDAO.insertMemberRecommended(recommended);

        //注册送
        try {
            registeredGift(member.getUid());
        } catch (Exception e) {
            SmsSendUtil.sendMsg("18317165702", member.getMobilephone() + "注册送优惠券失败!", 1);
        }


        // 发送手机短信
        String sms = redisClientTemplate.getProperties("receiveCouponSms");
        if (member.getMobilephone() != null && !member.getMobilephone().equals("")) {
            SysMessageLog logs = new SysMessageLog(member.getUid(), sms, 2, null, member.getMobilephone());
            sysMessageLogService.sendMsg(logs, 1);
        }
    }

    /**
     * 送红包.
     * @param uid
     */
    @Override
    public void registeredGift(Integer uid) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("type", 0);//注册送
        map.put("status", 1);//生效
        DrCouponsIssuedRules issuedRules = drCouponsIssuedRulesDAO.getCouponsIssuedRules(map);
        if (Utils.isObjectNotEmpty(issuedRules)) {
            Map<String, Object> param = new HashMap<String, Object>();
            param.put("uid", uid);
            param.put("remark", issuedRules.getName());
            param.put("coupons", issuedRules.getCoupons());
            try {
                drMemberFavourableDAO.regBatchInsert(param);
                DrMemberMsg msg = new DrMemberMsg(uid, 0, 1, "注册大礼包", new Date(), 1, 0, issuedRules.getMessage());
                drMemberMsgDAO.insertDrMemberMsg(msg);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }


    }

    @Override
    public void update(DrMember DrMember) throws Exception {
        drMemberDAO.updateByPrimaryKey(DrMember);
    }

    @Override
    public DrMember selectByPrimaryKey(Integer uid) {
        return drMemberDAO.selectByPrimaryKey(uid);

    }


    @Override
    public DrMember selectDrMemberByMobileOrRecomm(String str) {
        return drMemberDAO.selectDrMemberByMobileOrRecomm(str);
    }

    public String getRecommCode() {
        String code = "";
        String[] beforeShuffle = new String[]{
                "A", "B", "C", "D", "E", "F", "G", "H", "J",
                "K", "L", "M", "N", "P", "Q", "R", "S", "T", "U", "V",
                "W", "X", "Y", "Z"};
        Random rd = new Random();
        do {
            code = beforeShuffle[rd.nextInt(24)] + Utils.getRandomNumber();
            code = code.substring(0, 3) + beforeShuffle[rd.nextInt(24)] + code.substring(3, 5);
            DrMember member = drMemberDAO.selectDrMemberByMobileOrRecomm(code);
            if (member == null) {
                break;
            }
        } while (true);

        return code;
    }

    @Override
    public List<DrMember> selectMemberIsJoinActivity(Integer uid) {
        return drMemberDAO.selectMemberIsJoinActivity(uid);
    }

    @Override
    public Map<String, Object> selectIndexSummaryData() {
        return drMemberDAO.selectIndexSummaryData();
    }

    @Override
    public boolean isExistsMobilphone(String mobilephone) {
        Integer count = drMemberDAO.isExistsMobilphone(mobilephone);
        if (count == 0) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 获得红包 和 优惠券统计.
     *
     * @param uid 用户信息
     * @return 结果
     */
    @Override
    public HashMap<String, Object> queryMemberVoucherCount(Integer uid) {
        return drMemberDAO.queryMemberVoucherCount(uid);
    }

}
