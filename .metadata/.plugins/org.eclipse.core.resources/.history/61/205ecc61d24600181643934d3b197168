package com.dr.service.member.impl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import com.dr.common.ConfigUtil;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.dr.common.SmsSendUtil;
import com.dr.common.Utils;
import com.dr.dao.activity.DrActivityParameterDAO;
import com.dr.dao.activity.DrCouponsIssuedRulesDAO;
import com.dr.dao.activity.DrMemberFavourableDAO;
import com.dr.dao.cpa.DrChannelInfoDAO;
import com.dr.dao.cpa.DrCpaDeviceRecordDAO;
import com.dr.dao.member.DrMemberBaseInfoDAO;
import com.dr.dao.member.DrMemberDAO;
import com.dr.dao.member.DrMemberFundsDAO;
import com.dr.dao.member.DrMemberMsgDAO;
import com.dr.dao.member.DrMemberRecommendedDAO;
import com.dr.model.activity.DrActivityParameter;
import com.dr.model.activity.DrCouponsIssuedRules;
import com.dr.model.activity.DrMemberFavourable;
import com.dr.model.cpa.DrChannelInfo;
import com.dr.model.cpa.DrCpaDeviceRecord;
import com.dr.model.member.DrMember;
import com.dr.model.member.DrMemberBaseInfo;
import com.dr.model.member.DrMemberFunds;
import com.dr.model.member.DrMemberMsg;
import com.dr.model.member.DrMemberRecommended;
import com.dr.model.system.SysMessageLog;
import com.dr.service.member.DrMemberService;
import com.dr.service.system.SysMessageLogService;
import com.dr.service.system.impl.RedisClientTemplate;

@Service
@Transactional
public class DrMemberServiceImpl implements DrMemberService {
	
	@Autowired
	public DrMemberDAO drMemberDAO;
	@Autowired
	public DrMemberFundsDAO drMemberFundsDAO;
	@Autowired
	public DrMemberBaseInfoDAO drMemberBaseInfoDAO;
	@Autowired
	private SysMessageLogService sysMessageLogService;
	@Autowired
	private DrMemberRecommendedDAO drMemberRecommendedDAO;
	@Autowired
	private DrActivityParameterDAO drActivityParameterDAO;
	@Autowired
	private DrMemberFavourableDAO drMemberFavourableDAO;
	@Autowired
	private RedisClientTemplate redisClientTemplate;
	@Autowired
	private DrChannelInfoDAO drChannelInfoDAO;
	
	@Autowired
	private DrCouponsIssuedRulesDAO drCouponsIssuedRulesDAO;
	@Autowired
	private DrMemberMsgDAO drMemberMsgDAO;
	@Autowired
	private DrCpaDeviceRecordDAO drCpaDeviceRecordDAO;
	
	@Override
	public DrMember selectDrMemberByMobilephone(String loginId) {
		return drMemberDAO.selectDrMemberByMobilephone(loginId, ConfigUtil.RELEASE_TIME);
	}
	
	@Override
	public void insertMember(DrMemberBaseInfo baseinfo,DrMember member,Integer rid,DrCpaDeviceRecord cpa) throws Exception {
		
		int cpaType = 0;
		
		//有米渠道用户绑定
		if(cpa != null){
			if(StringUtils.isNotBlank(cpa.getAndroidId()) ||StringUtils.isNotBlank(cpa.getImei())){
				cpaType = 2;
//				member.setToFrom("youmi_android");
			}
			if(StringUtils.isNotBlank(cpa.getOsifa())){
				cpaType = 1;
//				member.setToFrom("youmi_IOS");
			}
		}
		
		
		String recommCode = getRecommCode();
		member.setRecommCodes(recommCode);
		drMemberDAO.insertDrMember(member);
		//生成会员统计数据
		BigDecimal defmount = new BigDecimal(0);
		//生成会员资金数据
		DrMemberFunds mf = new DrMemberFunds();
		mf.setUid(member.getUid());
		mf.setBalance(defmount);
		mf.setFreeze(defmount);
		mf.setWprincipal(defmount);
		mf.setWinterest(defmount);
		mf.setWpenalty(defmount);
		mf.setCarryCount(defmount);
		mf.setCrushCount(defmount);
		drMemberFundsDAO.insertDrMemberFunds(mf);
		
		//个人信息
		baseinfo.setUid(member.getUid());
		baseinfo.setSex(null);
		baseinfo.setAddTime(new Date());
		drMemberBaseInfoDAO.insertDrMemberBaseInfo(baseinfo);
		
		//推荐人
		DrMemberRecommended recommended = new DrMemberRecommended(member.getUid(), rid, null, null, null, null);
		drMemberRecommendedDAO.insertMemberRecommended(recommended);
		
		
		//注册送
		try{
			registeredGift(member.getUid());
		}catch (Exception e) {
			SmsSendUtil.sendMsg("18317165702", member.getMobilephone()+"注册送优惠券失败!", 1);
		}
		//赠送体验金
//		Map<String, Object> map = new HashMap<String, Object>();
//		map.put("type", 3);//新手体验金	
//		map.put("status", 0);
//		DrActivityParameter dap = drActivityParameterDAO.getDrActivityParameterByParam(map);
//		DrMemberFavourable dmf = new DrMemberFavourable(dap.getId(),member.getUid(), dap.getType(), dap.getCode(), dap.getName(), dap.getAmount(), dap.getRaisedRates(),
//				dap.getEnableAmount(), 0, null, "注册送体验金", 0,0,dap.getMultiple(),dap.getProductDeadline());
//		drMemberFavourableDAO.insertIntoInfo(dmf);
//		dap.setGrantQty(dap.getGrantQty()+1);
//		drActivityParameterDAO.updateActivityParameter(dap);


//		//赠送翻倍券（不参与的渠道注册用户不发放翻倍券；当活动类型的翻倍券剩余数量为0时，此活动自动结束）
//		boolean flag = true;
//		map.clear();
//		map.put("inverted", member.getToFrom());
//		List<DrChannelInfo> channelList = drChannelInfoDAO.getDrChannelInfoListForMap(map);
//		if(!Utils.isEmptyList(channelList)){
//			DrChannelInfo channel = channelList.get(0);
//			if(channel.getIsParticipation()==1){
//				flag = false;
//				System.out.println("渠道【"+channel.getName()+"】不参与注册送翻倍券活动");
//			}
//		}
//		
//		if(flag){
//			map.clear();
//			map.put("type", 4);//注册送翻倍券
//			map.put("status",0);
//			map.put("applicableScenarios","1");
//			DrActivityParameter activity = drActivityParameterDAO.getDrActivityParameterByParam(map);
//			if(Utils.isObjectNotEmpty(activity) && activity.getSurplusQty()-1>=0){//剩余数量大于0,继续给用户送翻倍券
//				DrMemberFavourable favourable = new DrMemberFavourable(activity.getId(),member.getUid(), activity.getType(), activity.getCode(), activity.getName(), activity.getAmount(), activity.getRaisedRates(),
//						activity.getEnableAmount(), 0, Utils.getDayNumOfDate(1-activity.getDeadline()), "注册送翻倍券", 0,0,activity.getMultiple(),activity.getProductDeadline());
//				drMemberFavourableDAO.insertIntoInfo(favourable);
////				activity.setSurplusQty(activity.getSurplusQty()-1);
////				drActivityParameterDAO.updateActivityParameter(activity);
//			}
//		}
	
		//更新有米渠道的UID
		if(cpaType == 2){
			cpa.setType(cpaType);
			cpa.setUid(member.getUid());
			drCpaDeviceRecordDAO.updateUidByAndroidForYoumi(cpa);
		}
		if(cpaType == 1){
			cpa.setType(cpaType);
			cpa.setUid(member.getUid());
			drCpaDeviceRecordDAO.updateUidByIOSForYoumi(cpa);
		}
		
		// 发送手机短信
		String sms = redisClientTemplate.getProperties("receiveCouponSms");
		if (member.getMobilephone() != null && !member.getMobilephone().equals("")) {
			SysMessageLog logs = new SysMessageLog(member.getUid(), sms, 2, null, member.getMobilephone());
			sysMessageLogService.sendMsg(logs,1);
		}
	}

	@Override
	public void registeredGift(Integer uid){
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("type", 0);//注册送
		map.put("status", 1);//生效
		DrCouponsIssuedRules issuedRules = drCouponsIssuedRulesDAO.getCouponsIssuedRules(map);
		if(Utils.isObjectNotEmpty(issuedRules)){
			Map<String,Object> param = new HashMap<String, Object>();
			param.put("uid", uid);
			param.put("remark", issuedRules.getName());
			param.put("coupons", issuedRules.getCoupons());
			try {
				drMemberFavourableDAO.regBatchInsert(param);
				DrMemberMsg msg = new DrMemberMsg(uid, 0, 1, "注册大礼包", new Date(), 1, 0, issuedRules.getMessage());
				drMemberMsgDAO.insertDrMemberMsg(msg);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void update(DrMember DrMember) throws Exception {
		drMemberDAO.updateByPrimaryKey(DrMember);
	}
	
	@Override
	public DrMember selectByPrimaryKey(Integer uid) {
		return drMemberDAO.selectByPrimaryKey(uid);
		
	}

	@Override
	public Map<String, Integer> queryCollectCountAndStayCount(
			Map<String, Object> map) {
		return drMemberDAO.queryCollectCountAndStayCount(map);
	}
	

	public String getRecommCode(){
		String code = "";
		String[] beforeShuffle = new String[] {
				"A", "B", "C", "D", "E", "F", "G", "H", "J",  
               "K", "L", "M", "N", "P", "Q", "R", "S", "T", "U", "V",  
               "W", "X", "Y", "Z" }; 
		Random rd = new Random();
		do {
			code = beforeShuffle[rd.nextInt(24)]+Utils.getRandomNumber();
			code = code.substring(0,3)+beforeShuffle[rd.nextInt(24)]+code.substring(3,5);
			DrMember member = drMemberDAO.selectDrMemberByMobileOrRecomm(code);
			if(member == null){
				break;
			}
		} while (true);
		return code;
	}

	@Override
	public DrMember selectDrMemberByMobileOrRecomm(String str) {
		return drMemberDAO.selectDrMemberByMobileOrRecomm(str);
	}

	@Override
	public boolean isExistsMobilphone(String mobilephone) {
		Integer count = drMemberDAO.isExistsMobilphone(mobilephone);
		if(count==0){
			return false;
		}else{
			return true;
		}
	}
	
	@Override
	public List<DrMember> selectMemberIsJoinActivity(Integer uid) {
		return drMemberDAO.selectMemberIsJoinActivity(uid);
	}
}
