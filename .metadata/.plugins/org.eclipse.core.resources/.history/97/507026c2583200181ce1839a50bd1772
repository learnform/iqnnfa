package com.dr.controller.index;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.jytpay.utils.StringUtil;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.dr.common.BaseResult;
import com.dr.common.ConfigUtil;
import com.dr.common.SecurityUtils;
import com.dr.common.Utils;
import com.dr.model.member.DrMember;
import com.dr.model.system.SysMessageLog;
import com.dr.service.member.DrMemberService;
import com.dr.service.product.DrProductInvestService;
import com.dr.service.system.SysMessageLogService;
import com.dr.service.system.impl.RedisClientTemplate;

@RequestMapping("/login")
@Controller
public class LoginController {
    private Logger log = Logger.getLogger(this.getClass());

    @Autowired
    private DrMemberService drMemberService;
    @Autowired
    private SysMessageLogService sysMessageLogService;
    @Autowired
    public RedisClientTemplate redisClientTemplate;
    @Autowired
    private DrProductInvestService drProductInvestService;


    /**
     * 用户登录
     *
     * @param req
     * @return
     */
    @RequestMapping(value = "/doLogin", method = RequestMethod.POST)
    @ResponseBody
    public String login(HttpServletRequest req, @RequestBody Map<String, Object> params) {
        DrMember member = new DrMember();
        Utils.getObjectFromMap(member, params);
        BaseResult br = new BaseResult();
        try {
            Integer loginErrorNums = req.getSession().getAttribute("loginErrorNums") == null ? 0 : (Integer) req.getSession().getAttribute("loginErrorNums");//错误登录次数
            if (member.getPassWord() == null || member.getPassWord().trim() == null || member.getMobilephone().trim() == null) {//登录名或密码为空
                br.setSuccess(false);
                br.setErrorCode("1001");
                return JSON.toJSONString(br);
            } else if (loginErrorNums > 2
                    && req.getSession().getAttribute("rand") != null
                    && params.get("picCode") != null
                    && !req.getSession().getAttribute("rand").toString().toLowerCase().equals(params.get("picCode") + "".toLowerCase())) {
                br.setSuccess(false);
                br.setErrorCode("1002");
                return JSON.toJSONString(br);
            }

            DrMember m = drMemberService.selectDrMemberByMobilephone(member.getMobilephone());

            if (m == null) {
                br.setSuccess(false);
                br.setErrorCode("1111");
                br.setErrorMsg("用户不存在");
                return JSON.toJSONString(br);
            } else if (m.getRegDate().getTime() < ConfigUtil.RELEASE_TIME && (m.getPassWord() == null || "".equals(m.getPassWord().trim()))) {
                br.setSuccess(false);
                br.setErrorCode("1101");
                br.setErrorMsg("老用户需要修改密码");
                return JSON.toJSONString(br);
            } else if (m == null || !m.getPassWord().equals(SecurityUtils.MD5AndSHA256(member.getPassWord())) || m.getStatus() != 1) {
                req.getSession().setAttribute("loginErrorNums", loginErrorNums + 1);
                br.setSuccess(false);
                br.setErrorCode("1003");
                Map<String, Object> map = new HashMap<String, Object>();
                map.put("loginErrorNums", loginErrorNums + 1);
                br.setMap(map);
                return JSON.toJSONString(br);
            }
            Date nowDate = new Date();
            m.setLastLoginIp(Utils.getIpAddr(req));
            m.setLastLoginTime(nowDate);
            drMemberService.update(m);
            // 2.插入session
            req.getSession().setAttribute(ConfigUtil.FRONT_LOGIN_USER, m);
            //判断用户是否显示再来一次翻倍收益图片
            Map<String, Object> brMap = drProductInvestService.selectUserLastInvestmentInfo(m.getUid());
            if (Utils.isObjectNotEmpty(brMap.get("type")) && brMap.get("type").toString().equals("1")
                    && Utils.isObjectNotEmpty(brMap.get("expireDate")) && brMap.get("flag").toString().equals("1")) {
                br.setFlag(true);
            } else {
                br.setFlag(false);
            }
            br.setSuccess(true);
        } catch (Exception e) {
            log.error("登陆失败", e);
            br.setSuccess(false);
            br.setErrorCode("9999");
        }
        return JSON.toJSONString(br);
    }

    /**
     * 验证会员
     *
     * @return 处理结果.
     */
    @RequestMapping(value = "/verifyMember", method = RequestMethod.POST)
    @ResponseBody
    public String verifyMember(@RequestBody Map<String, Object> params) {
        BaseResult br = new BaseResult();
        try {
            DrMember member = new DrMember();
            Utils.getObjectFromMap(member, params);
            DrMember m = drMemberService.selectDrMemberByMobilephone(member.getMobilephone());
            if (m == null) {
                br.setSuccess(false);
                br.setErrorCode("2300");
                br.setErrorMsg("账号不存在");
            } else if (m.getAttribute().equals(1) && (m.getPassWord() == null || "".equals(m.getPassWord().trim()))) {
                br.setSuccess(false);
                br.setErrorCode("1101");
                br.setErrorMsg("老用户需要修改密码");
            } else {
                br.setSuccess(true);
            }
        } catch (Exception ex) {
            log.error("验证失败", ex);
            br.setSuccess(false);
            br.setErrorCode("9999");
        }
        return JSON.toJSONString(br);
    }

    /*
     * 忘记密码，发送手机验证码找回密码
     * @param req
     * @return
     */
    @RequestMapping("/forgetPwdSmsCode")
    @ResponseBody
    public String forgetPwdSmsCode(HttpServletRequest req, @RequestBody Map<String, Object> param) {
        BaseResult br = new BaseResult();
        String mobilephone = String.valueOf(param.get("mobilephone"));
        try {
            if (Utils.isObjectEmpty(mobilephone)) {
                br.setSuccess(false);
                br.setErrorCode("1003");
                return JSON.toJSONString(br);
            }
            DrMember drMember = drMemberService.selectDrMemberByMobilephone(mobilephone);
            if (drMember == null) {
                br.setSuccess(false);
                br.setErrorCode("1001");
                return JSON.toJSONString(br);
            }
            Object typeObj = param.get("type");
            if (Utils.isObjectEmpty(typeObj)) {
                br.setSuccess(false);
                br.setErrorCode("9999");
                return JSON.toJSONString(br);
            }
            String picCode = param.get("picCode") + "";//图片验证码
            String vaildCode = redisClientTemplate.get("rand_pc:" + mobilephone);
//			log.info("前端传入参数为："+JSON.toJSONString(param)+",服务端图形验证码为："+vaildCode);
            DrMember loginMember = (DrMember) req.getSession().getAttribute(ConfigUtil.FRONT_LOGIN_USER);
            if (Utils.isObjectNotEmpty(loginMember) && !drMember.getUid().equals(loginMember.getUid())) {
                br.setSuccess(false);
                br.setErrorCode("1003");
                return JSON.toJSONString(br);
            }
            if (Utils.isObjectEmpty(loginMember) && (StringUtils.isEmpty(picCode) || StringUtils.isEmpty(vaildCode) || !picCode.toLowerCase().equals(vaildCode.toLowerCase()))) {
                br.setSuccess(false);
                br.setErrorCode("1004");
                return JSON.toJSONString(br);
            }

            int type = (Integer) typeObj;
            String redisCode = redisClientTemplate.get("forgetPwdCode_" + mobilephone);
            int flag = 0;
            int seconds = 0;
            if (StringUtils.isNotEmpty(redisCode)) {//短信内容是否存在redis中
                seconds = Utils.getDateSecondsSub(Utils.getStrDatetime(new Date()), redisClientTemplate.get("forgetPwdSendTime_" + mobilephone));
                if (seconds < 59) {
                    if (2 == type) {
                        String forgetPwdUse = redisClientTemplate.get("forgetPwdUse_" + mobilephone);
                        if ("1".equals(forgetPwdUse)) {
                            br.setSuccess(false);
                            br.setErrorCode("8888");//语音频繁操作
                            return JSON.toJSONString(br);
                        } else {
                            seconds = 60;
                        }
                    }
                } else {
                    redisCode = Utils.getRandomNumber();//生成验证码
                    //短信验证码 10分钟有效
                    redisClientTemplate.setex("forgetPwdCode_" + mobilephone, 600, redisCode);
                    //短信发送时间 10分钟有效
                    redisClientTemplate.setex("forgetPwdSendTime_" + mobilephone, 600, Utils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
                }
            } else if (StringUtils.isBlank(redisCode)) {//短信内容是否存在redis中
                redisCode = Utils.getRandomNumber();//生成验证码
                seconds = 60;
                //短信验证码 10分钟有效
                redisClientTemplate.setex("forgetPwdCode_" + mobilephone, 600, redisCode);
                //短信发送时间 10分钟有效
                redisClientTemplate.setex("forgetPwdSendTime_" + mobilephone, 600, Utils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
            }
            if (seconds > 59) {//两次时间间隔60秒，重新发送短信
                String content = redisClientTemplate.getProperties("forgetPwdSms").replace("${1}", drMember.getRealName() == null ? "用户" : drMember.getRealName())
                        .replace("${2}", redisCode);
//				if(2 == type){
//					content = redisCode;
//					redisClientTemplate.setex("forgetPwdUse_"+mobilephone, 600, "1");
//				}
//				if(1 == type){
//					redisClientTemplate.del("forgetPwdUse_"+mobilephone);
//				}
                SysMessageLog logs = new SysMessageLog(drMember.getUid(), content, 5, null, mobilephone);
                flag = sysMessageLogService.sendMsg(logs, type);
            } else {
                flag = 1;
            }
            //短信是否发送成功
            if (flag > 0) {
                br.setSuccess(true);
            } else {
                br.setSuccess(false);
                br.setErrorCode("1002");
                log.info("短信发送失败，返回码：" + flag);
            }
        } catch (Exception e) {
            log.error("忘记密码时短信发送错误", e);
            br.setErrorCode("9999");
            br.setSuccess(false);
        }
        return JSON.toJSONString(br);
    }


    /*
     * 比对验证码
     */
    @RequestMapping("/validateSmsCode")
    @ResponseBody
    public String validateSmsCode(HttpServletRequest req, @RequestBody Map<String, Object> param) {
        BaseResult br = new BaseResult();
        try {
            String code = String.valueOf(param.get("code"));
            String mobilephone = String.valueOf(param.get("mobilephone"));
            String redisCode = redisClientTemplate.get("forgetPwdCode_" + mobilephone);
            if (StringUtils.isNotBlank(code) && code.equals(redisCode)) {
                req.getSession().setAttribute("forgetPwdPhone", mobilephone);
                br.setSuccess(true);
            } else {
                br.setSuccess(false);
            }
        } catch (Exception e) {
            br.setSuccess(false);
            br.setErrorCode("9999");
        }

        return JSON.toJSONString(br);
    }

    /**
     * 修改密码
     *
     * @param req
     * @return
     */
    @RequestMapping(value = "/updatePwd", method = RequestMethod.POST)
    @ResponseBody
    public String updatePwd(HttpServletRequest req, @RequestBody Map<String, Object> param) {
        BaseResult br = new BaseResult();
        String mobilephone = String.valueOf(req.getSession().getAttribute("forgetPwdPhone"));
        String password = String.valueOf(param.get("password"));
        String confirmPwd = String.valueOf(param.get("confirmPwd"));
        try {
            if (StringUtils.isNotBlank(mobilephone) && password.equals(confirmPwd)) {
                DrMember drMember = drMemberService.selectDrMemberByMobilephone(mobilephone);
                final boolean state = drMember.getPassWord() == null || "".equals(drMember.getPassWord().trim());
                drMember.setPassWord(SecurityUtils.MD5AndSHA256(password));
                drMemberService.update(drMember);
                br.setSuccess(true);
                //注册送
                try {
                    if (1 == drMember.getAttribute() && state) {
                        drMemberService.registeredGift(drMember.getUid());
                    }
                } catch (Exception e) {
                    log.error("老用户送红包失败", e);
                }
                redisClientTemplate.del("forgetPwdCode_" + mobilephone);
                redisClientTemplate.del("forgetPwdSendTime_" + mobilephone);
//				redisClientTemplate.del("forgetPwdUse_"+mobilephone);
            } else {
                br.setSuccess(false);
            }
        } catch (Exception e) {
            log.error("手机号" + mobilephone + "找回密码失败", e);
            br.setSuccess(false);
            br.setErrorCode("9999");
        }
        return JSON.toJSONString(br);
    }

    /**
     * 生成图片验证码
     *
     * @param request
     * @param response
     */
    @RequestMapping("/validateCode")
    public void generateValidateCode(HttpServletRequest request, HttpServletResponse response, @RequestParam(required = false) String mobilephone) {
        try {
            response.setHeader("Pragma", "No-cache");
            response.setHeader("Cache-Control", "no-cache");
            response.setDateHeader("Expires", 0);
            int width = 60, height = 30;
            BufferedImage image = new BufferedImage(width, height,
                    BufferedImage.TYPE_INT_RGB);
            OutputStream os = response.getOutputStream();
            Graphics g = image.getGraphics();
            Random random = new Random();
            g.setColor(getRandColor(200, 250));
            g.fillRect(0, 0, width, height);

            g.setFont(new Font("Times New Roman", Font.PLAIN, 25));
            g.setColor(getRandColor(160, 200));
            for (int i = 0; i < 155; i++) {
                int x = random.nextInt(width);
                int y = random.nextInt(height);
                int xl = random.nextInt(12);
                int yl = random.nextInt(12);
                g.drawLine(x, y, x + xl, y + yl);
            }
            // 设置备选验证码:包括"a-z"和数字"0-9"
            String base = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            int size = base.length();
            String sRand = "";
            for (int i = 0; i < 4; i++) {
                //String rand = String.valueOf(random.nextInt(10));
                int start = random.nextInt(size);
                String strRand = base.substring(start, start + 1);
                sRand += strRand;
                g.setColor(new Color(20 + random.nextInt(110), 20 + random
                        .nextInt(110), 20 + random.nextInt(110)));
                g.drawString(strRand + "", 13 * i + 6, 25);
            }
//			request.getSession().setAttribute("rand", sRand);
            if (Utils.isObjectNotEmpty(mobilephone)) {
                redisClientTemplate.setex("rand_pc:" + mobilephone, 60, sRand);
            }
            g.dispose();
            ImageIO.write(image, "JPEG", os);
            os.flush();
            os.close();
            os = null;
            response.flushBuffer();
        } catch (IllegalStateException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    public Color getRandColor(int fc, int bc) {
        Random random = new Random();
        if (fc > 255)
            fc = 255;
        if (bc > 255)
            bc = 255;
        int r = fc + random.nextInt(bc - fc);
        int g = fc + random.nextInt(bc - fc);
        int b = fc + random.nextInt(bc - fc);
        return new Color(r, g, b);
    }

}
