package com.dr.controller.index;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.dr.common.BaseResult;
import com.dr.common.ConfigUtil;
import com.dr.common.SecurityUtils;
import com.dr.common.Sig;
import com.dr.common.Utils;
import com.dr.model.cpa.DrChannelRewardPhonedata;
import com.dr.model.member.DrMember;
import com.dr.model.member.DrMemberBaseInfo;
import com.dr.model.system.SysMessageLog;
import com.dr.service.activity.DrMemberFavourableService;
import com.dr.service.member.DrChannelRewardPhonedataService;
import com.dr.service.member.DrMemberBaseInfoService;
import com.dr.service.member.DrMemberService;
import com.dr.service.system.SysMessageLogService;
import com.dr.service.system.impl.RedisClientTemplate;

@RequestMapping( "/register" )
@Controller
public class RegisterController {
	private Logger log = Logger.getLogger(this.getClass());
	
	@Autowired
	public DrMemberBaseInfoService drMemberBaseInfoService;
	@Autowired
	public SysMessageLogService sysMessageLogService;
	@Autowired
	public DrMemberService drMemberService;
	@Autowired
	private DrMemberFavourableService drMemberFavourableService;
	@Autowired
	public RedisClientTemplate redisClientTemplate;
	@Autowired
	private DrChannelRewardPhonedataService drChannelRewardPhonedataService;
	
	@RequestMapping("/existMobilePhone")
	@ResponseBody
	public String vertifyPhoneRep(HttpServletRequest req,@RequestBody Map<String, Object> params){
		BaseResult br = new BaseResult();
		try {
			String mobilephone = params.get("mobilephone").toString();
			params.clear();
			params.put("exists", drMemberService.isExistsMobilphone(mobilephone));
			br.setMap(params);
			br.setSuccess(true);
		} catch (Exception e) {
			log.error("手机号码【"+params.get("mobilephone")+"】注册验证失败！", e);
			br.setSuccess(false);
			br.setErrorCode("9999");
		}
		return JSON.toJSONString(br);
	}
	
	/**
	 * 发送注册验证码短信
	 * @param req
	 * @param mobilephone
	 * @param code
	 * @return
	 */
	@RequestMapping("/sendRegMsg")
	@ResponseBody
	public String sendRegMsg(HttpServletRequest req,@RequestBody Map<String,Object> params){
		BaseResult br = new BaseResult();

		String picCode = params.get("picCode")+"";
		String mobilephone = params.get("mobilephone")+"";
		Object typeObj = params.get("type");
		if(Utils.isObjectEmpty(typeObj)){
			br.setSuccess(false);
			br.setErrorCode("9999");
			return JSON.toJSONString(br);
		}
		int type = (Integer) typeObj;
		try {
			Map<String,Object> map = new HashMap<String, Object>();
			//判断手机发送短信条数
			map.put("uid", 0);
			map.put("phone", mobilephone);
			map.put("type", 1);
			int sendCount = sysMessageLogService.selectMsgLogSendCount(map);
			map.clear();
			if(sendCount > 4){
				br.setSuccess(false);
				br.setErrorCode("1002");//每天只能发5条短信
				return JSON.toJSONString(br);
			}
			
//			String randCode = String.valueOf(req.getSession().getAttribute("rand"));//图片验证码
			String randCode = redisClientTemplate.get("rand_pc:"+mobilephone);
			if(Utils.isObjectEmpty(randCode)||(!randCode.toLowerCase().equals(picCode.toLowerCase()))){//图片验证码不正确
				br.setSuccess(false);
				br.setErrorCode("1001");
				return JSON.toJSONString(br);
			}else if (drMemberService.isExistsMobilphone(mobilephone)) {//当前手机号已经存在
				br.setSuccess(false);
				br.setErrorCode("1007");
			}
			String redisCode = redisClientTemplate.get("regMsgCode_"+mobilephone);
			int flag = 0;
			int  seconds = 0;
			if(StringUtils.isNotEmpty(redisCode)){
				//当前时间和当前手机号码上次发送短信时间的秒数差
				seconds = Utils.getDateSecondsSub(Utils.getStrDatetime(new Date()), redisClientTemplate.get("regMsgSendTime_"+mobilephone));
				if(seconds < 59){
					if(2 == type){
						String regMsgUse = redisClientTemplate.get("regMsgUse_"+mobilephone);
						if("1".equals(regMsgUse)){
							br.setSuccess(false);
							br.setErrorCode("8888");//语音频繁操作
							return JSON.toJSONString(br);
						}else{
							seconds = 60;
						}
					}
				}else{
					redisCode = Utils.getRandomNumber();//生成验证码
					//短信验证码 10分钟有效
					redisClientTemplate.setex("regMsgCode_"+mobilephone, 600, redisCode);
					//短信发送时间 10分钟有效
					redisClientTemplate.setex("regMsgSendTime_"+mobilephone, 600, Utils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
				}
			}else if(StringUtils.isBlank(redisCode)){//短信内容是否存在redis中
				redisCode = Utils.getRandomNumber();//生成验证码		
				seconds = 60;
				//短信验证码 10分钟有效
				redisClientTemplate.setex("regMsgCode_"+mobilephone, 600, redisCode);
				//短信发送时间 10分钟有效
				redisClientTemplate.setex("regMsgSendTime_"+mobilephone, 600, Utils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
			}
			if(seconds > 59){//两次时间间隔60秒，重新发送短信
				String content = redisClientTemplate.getProperties("regSms")
						.replace("${code}",redisCode);
//				if(2 == type){
//					content = redisCode;
//					redisClientTemplate.setex("regMsgUse_"+mobilephone, 600, "1");
//				}
//				if(1 == type){
//					redisClientTemplate.del("regMsgUse_"+mobilephone);
//				}
				SysMessageLog logs = new SysMessageLog(0,content,1, null, mobilephone);
				flag = sysMessageLogService.sendMsg(logs,type);
			}else{
				flag = 1;
			}
			//短信是否发送成功
			if (flag > 0) {
				br.setSuccess(true);
			} else {
				br.setSuccess(false);
				br.setErrorCode("1003");//短信发送失败
			}
		} catch (Exception e) {
			log.error("短信发送失败", e);
			br.setSuccess(false);
			br.setErrorCode("9999");
		}
		return JSON.toJSONString(br);
	}
	
	/**
	 *  用户注册
	 * @param req
	 * @param baseinfo
	 * @param member
	 * @return
	 */
	@RequestMapping("/reg")
	@ResponseBody
	public String register(HttpServletRequest req,@RequestBody Map<String, Object> params){
		BaseResult br = new BaseResult();
		DrMember member = new DrMember();
		DrMemberBaseInfo baseinfo = new DrMemberBaseInfo();
		Utils.getObjectFromMap(baseinfo, params);
		Utils.getObjectFromMap(member, params);
		
		if(Utils.isObjectNotEmpty(req.getSession().getAttribute(ConfigUtil.FRONT_LOGIN_USER))){
			br.setSuccess(true);
			br.setMsg("注册成功");
			return JSON.toJSONString(br);
		}
		String regPhoneCode = redisClientTemplate.get("regMsgCode_"+member.getMobilephone());
		String smsCode = params.get("smsCode")+"";//短信验证码
		String picCode = params.get("picCode")+"";//图片验证码
		String randCode = redisClientTemplate.get("rand_pc:"+member.getMobilephone()) == null ? "":redisClientTemplate.get("rand_pc:"+member.getMobilephone()).toLowerCase() ;
		
		if(StringUtils.isBlank(smsCode)){//短信验证码为空
			br.setSuccess(false);
			br.setErrorCode("1001");
			return JSON.toJSONString(br);
		}else if(!smsCode.equals(regPhoneCode) || StringUtils.isBlank(regPhoneCode)){//验证码错误
			br.setSuccess(false);
			br.setErrorCode("1002");
			return JSON.toJSONString(br);
		}else if(Utils.isObjectEmpty(member.getMobilephone())){//手机号码为空
			br.setSuccess(false);
			br.setErrorCode("1003");
			return JSON.toJSONString(br);
		}else if(Utils.isObjectEmpty(picCode) || (!picCode.toLowerCase().equals(randCode.toLowerCase()))){//图片验证码不对
			br.setSuccess(false);
			br.setErrorCode("1004");
			return JSON.toJSONString(br);
		}else if (drMemberService.isExistsMobilphone(member.getMobilephone())) {//当前手机号已经存在
			br.setSuccess(false);
			br.setErrorCode("1007");
		}
		String pwdRegex = "[A-Za-z0-9@!#$%^&*.~_]{6,18}";
		if(Utils.isObjectEmpty(member.getPassWord())
				||!member.getPassWord().trim().matches(pwdRegex)){ //密码不合法
			br.setErrorCode("1005");
			return JSON.toJSONString(br);
		}
		if("0".equals(params.get("checkbox"))){//是否勾选注册协议
			br.setSuccess(false);
			br.setErrorCode("1006");
			return JSON.toJSONString(br);
		}
		try {
			//如果注册用户名为空则用户名为手机号码
			member.setMobileVerify(1);//手机号码已认证
			member.setRegDate(new Date());
			member.setLoginVerify(0);
			member.setEmailVerify(0);
			member.setRealVerify(0);
			member.setIsBlack(0);
			member.setStatus(1);
			member.setRegIp(Utils.getIpAddr(req));
			member.setPassWord(SecurityUtils.MD5AndSHA256(member.getPassWord()));
			member.setRegFrom(0);
			member.setToFrom(params.get("toFrom")==null?"QCGZ":params.get("toFrom").toString());
			
			Boolean flag = redisClientTemplate.tryLock("reg.mobilephone."+member.getMobilephone(), 3, TimeUnit.SECONDS,true);
			if(flag){
				if(drMemberService.isExistsMobilphone(member.getMobilephone())){
					br.setSuccess(false);
					br.setErrorCode("1007");
					return JSON.toJSONString(br);
				}
				Integer rid = null;
				if(Utils.isObjectNotEmpty(params.get("recommPhone"))){//推荐用户是否存在
					DrMember m = drMemberService.selectDrMemberByMobileOrRecomm(params.get("recommPhone").toString());//推荐用户是否存在
					if(Utils.isObjectEmpty(m)){
						br.setSuccess(false);
						br.setErrorCode("1008");
						return JSON.toJSONString(br);
					}else{
						rid = m.getUid();
					}
				}
				drMemberService.insertMember(baseinfo,member,rid);
//				if(Utils.isObjectNotEmpty(rid) && drMemberService.selectMemberIsJoinActivity(rid).size() > 0 && 
//						(new Date()).before(Utils.parse(redisClientTemplate.getProperties("activityEndDate"), "yyyy-MM-dd HH:mm:ss"))){//注册送加息券
//					drMemberFavourableService.sendFavourable(rid, 544, 2, "邀请小伙伴，理财更轻松！");
//				}
//				if(Utils.isParticipate(member.getToFrom())){
//					drMemberFavourableService.sendFavourable(member.getUid(), 995, 2, "注册送加息券");
////					drMemberFavourableService.sendFavourable(member.getUid(), 765, 2, "注册送加息券");
//				}
				req.getSession().setAttribute(ConfigUtil.FRONT_LOGIN_USER,member);
				br.setSuccess(true);
				br.setMsg("注册成功");
				redisClientTemplate.del("regMsgCode_"+member.getMobilephone());
				redisClientTemplate.del("regMsgSendTime_"+member.getMobilephone());
			}else{
				br.setErrorCode("9999");
				br.setSuccess(false);
				log.info("注册手机号获取锁失败："+member.getMobilephone());
			}
		}catch (Exception e) {
			log.error("注册失败："+member.getMobilephone(), e);
			br.setErrorCode("9999");
			br.setSuccess(false);
		}
		return JSON.toJSONString(br);
	}
	
	/**
	 *  wps渠道用户注册
	 * @param req
	 * @param baseinfo
	 * @param member
	 * @return
	 */
	@RequestMapping("/wpsRegister")
	@ResponseBody
	public String wpsRegister(HttpServletRequest req,@RequestBody Map<String, Object> params){
		BaseResult br = new BaseResult();
		DrMember member = new DrMember();
		DrMemberBaseInfo baseinfo = new DrMemberBaseInfo();
		Utils.getObjectFromMap(baseinfo, params);
		Utils.getObjectFromMap(member, params);
		String userid = String.valueOf(params.get("userid")); 
		String extra = String.valueOf(params.get("extra"));
	    String sign = (String) params.get("sign");
		
		if(Utils.isObjectNotEmpty(req.getSession().getAttribute(ConfigUtil.FRONT_LOGIN_USER))){
			br.setSuccess(true);
			br.setMsg("注册成功");
			return JSON.toJSONString(br);
		}
		String regPhoneCode = redisClientTemplate.get("regMsgCode_"+member.getMobilephone());
		String smsCode = params.get("smsCode")+"";//短信验证码
		String picCode = params.get("picCode")+"";//图片验证码
		String randCode = redisClientTemplate.get("rand_pc:"+member.getMobilephone()) == null ? "":redisClientTemplate.get("rand_pc:"+member.getMobilephone()).toLowerCase() ;
		
		if(StringUtils.isBlank(smsCode)){//短信验证码为空
			br.setSuccess(false);
			br.setErrorCode("1001");
			return JSON.toJSONString(br);
		}else if(!smsCode.equals(regPhoneCode) || StringUtils.isBlank(regPhoneCode)){//验证码错误
			br.setSuccess(false);
			br.setErrorCode("1002");
			return JSON.toJSONString(br);
		}else if(Utils.isObjectEmpty(member.getMobilephone())){//手机号码为空
			br.setSuccess(false);
			br.setErrorCode("1003");
			return JSON.toJSONString(br);
		}else if(Utils.isObjectEmpty(picCode) || (!picCode.toLowerCase().equals(randCode.toLowerCase()))){//图片验证码不对
			br.setSuccess(false);
			br.setErrorCode("1004");
			return JSON.toJSONString(br);
		}else if (drMemberService.isExistsMobilphone(member.getMobilephone())) {//当前手机号已经存在
			br.setSuccess(false);
			br.setErrorCode("1007");
		}
		String pwdRegex = "[A-Za-z0-9@!#$%^&*.~_]{6,18}";
		if(Utils.isObjectEmpty(member.getPassWord())
				||!member.getPassWord().trim().matches(pwdRegex)){ //密码不合法
			br.setErrorCode("1005");
			return JSON.toJSONString(br);
		}
		if("0".equals(params.get("checkbox"))){//是否勾选注册协议
			br.setSuccess(false);
			br.setErrorCode("1006");
			return JSON.toJSONString(br);
		}
		
	     TreeMap<String, String> param = new TreeMap<String, String>();
	     param.put("userid", userid);
	     param.put("extra", extra);
	     param.put("sig",sign);
/*		TreeMap<String, String> param = new TreeMap<String, String>();
		param.put("userid", "55013248");
		param.put("extra", "");
		param.put("sign", "d1015ca16cc4c2b624c6adfaba88b91c");*/
			
		try {
			//如果注册用户名为空则用户名为手机号码
			member.setMobileVerify(1);//手机号码已认证
			member.setRegDate(new Date());
			member.setLoginVerify(0);
			member.setEmailVerify(0);
			member.setRealVerify(0);
			member.setIsBlack(0);
			member.setStatus(1);
			member.setRegIp(Utils.getIpAddr(req));
			member.setPassWord(SecurityUtils.MD5AndSHA256(member.getPassWord()));
			member.setRegFrom(0);
			if(Sig.validSig(param)){
				member.setToFrom("wps");
			}else{
				member.setToFrom("spw");
			}
			Boolean flag = redisClientTemplate.tryLock("reg.mobilephone."+member.getMobilephone(), 3, TimeUnit.SECONDS,true);
			if(flag){
				if(drMemberService.isExistsMobilphone(member.getMobilephone())){
					br.setSuccess(false);
					br.setErrorCode("1007");
					return JSON.toJSONString(br);
				}
				Integer rid = null;
				if(Utils.isObjectNotEmpty(params.get("recommPhone"))){//推荐用户是否存在
					DrMember m = drMemberService.selectDrMemberByMobileOrRecomm(params.get("recommPhone").toString());//推荐用户是否存在
					if(Utils.isObjectEmpty(m)){
						br.setSuccess(false);
						br.setErrorCode("1008");
						return JSON.toJSONString(br);
					}else{
						rid = m.getUid();
					}
				}
				drMemberService.insertMember(baseinfo,member,rid);
				
				DrChannelRewardPhonedata drChannelRewardPhonedata = new DrChannelRewardPhonedata();
				drChannelRewardPhonedata.setExtra(extra);
				drChannelRewardPhonedata.setUserid(userid);
				drChannelRewardPhonedata.setSign(sign);
				drChannelRewardPhonedata.setRewardType("1");
				drChannelRewardPhonedata.setUid(member.getUid());
				drChannelRewardPhonedata.setEffType("0");
				drChannelRewardPhonedata.setPhone(member.getMobilephone());
				drChannelRewardPhonedataService.AddDrChannelRewardPhonedata(drChannelRewardPhonedata);
//				if(Utils.isObjectNotEmpty(rid) && drMemberService.selectMemberIsJoinActivity(rid).size() > 0 && 
//						(new Date()).before(Utils.parse(redisClientTemplate.getProperties("activityEndDate"), "yyyy-MM-dd HH:mm:ss"))){//注册送加息券
//					drMemberFavourableService.sendFavourable(rid, 544, 2, "邀请小伙伴，理财更轻松！");
//				}
//				if(Utils.isParticipate(member.getToFrom())){
//					drMemberFavourableService.sendFavourable(member.getUid(), 995, 2, "注册送加息券");
////					drMemberFavourableService.sendFavourable(member.getUid(), 765, 2, "注册送加息券");
//				}
				req.getSession().setAttribute(ConfigUtil.FRONT_LOGIN_USER,member);
				br.setSuccess(true);
				br.setMsg("注册成功");
				redisClientTemplate.del("regMsgCode_"+member.getMobilephone());
				redisClientTemplate.del("regMsgSendTime_"+member.getMobilephone());
			}else{
				br.setErrorCode("9999");
				br.setSuccess(false);
				log.info("注册手机号获取锁失败："+member.getMobilephone());
			}
		}catch (Exception e) {
			log.error("注册失败："+member.getMobilephone(), e);
			br.setErrorCode("9999");
			br.setSuccess(false);
		}
		return JSON.toJSONString(br);
	}
	

}
