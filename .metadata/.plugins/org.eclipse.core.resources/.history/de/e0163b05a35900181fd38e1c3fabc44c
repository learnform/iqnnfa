package com.dr.controller.activity;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.dr.common.BaseResult;
import com.dr.common.PageInfo;
import com.dr.common.Utils;
import com.dr.model.activity.DrActivity;
import com.dr.model.activity.DrMemberFavourable;
import com.dr.model.member.DrMember;
import com.dr.model.member.DrMemberFunds;
import com.dr.model.product.DrProductInfo;
import com.dr.service.activity.BusinessReceiveRecordService;
import com.dr.service.activity.DrActivityService;
import com.dr.service.activity.DrMemberFavourableService;
import com.dr.service.member.DrMemberFundsService;
import com.dr.service.member.DrMemberLotteryLogService;
import com.dr.service.member.DrMemberRecommendedService;
import com.dr.service.member.DrMemberService;
import com.dr.service.product.DrProductInfoService;
import com.dr.service.product.DrProductInvestService;
import com.dr.service.system.impl.RedisClientTemplate;

@Controller
@RequestMapping("/activity")
public class ActivityController {
    private Logger log = Logger.getLogger(this.getClass());

    @Autowired
    private DrMemberFavourableService drMemberFavourableService;
    @Autowired
    private DrProductInfoService drProductInfoService;
    @Autowired
    private DrMemberRecommendedService drMemberRecommendedService;
    @Autowired
    private DrMemberFundsService drMemberFundsService;
    @Autowired
    private DrMemberService drMemberService;
    @Autowired
    private RedisClientTemplate redisClientTemplate;
    @Autowired
    private DrMemberLotteryLogService drMemberLotteryLogService;
    @Autowired
    private DrActivityService drActivityService;
    @Autowired
    private DrProductInvestService drProductInvestService;
    @Autowired
    private BusinessReceiveRecordService businessReceiveRecordService;


    @RequestMapping(value = "/index", method = RequestMethod.POST)
    @ResponseBody
    public String index(HttpServletRequest req, Integer uid, Integer status, PageInfo pi) {
        BaseResult br = new BaseResult();
        try {
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("uid", uid);
            map.put("status", status);
            map.put("type", new Integer[]{1, 2, 3, 4});
            List<DrMemberFavourable> list = drMemberFavourableService.selectByParam(map);
            map.clear();
            map.put("list", list);
            br.setMap(map);
            br.setSuccess(true);
        } catch (Exception e) {
            log.error("我的优惠券查询失败", e);
            br.setErrorCode("9999");
            br.setSuccess(false);
        }
        return JSON.toJSONString(br);
    }

    @RequestMapping(value = "/usable", method = RequestMethod.POST)
    @ResponseBody
    public String usable(HttpServletRequest req, Integer pid, Integer uid, BigDecimal amount) {
        BaseResult br = new BaseResult();
        try {
            Map<String, Object> param = new HashMap<String, Object>();
            DrProductInfo info = drProductInfoService.selectProductByPrimaryKey(pid);
            param.put("status", 0);
            param.put("uid", uid);
            param.put("deadline", info.getDeadline());
            List<DrMemberFavourable> list = null;
            //返回最小可用金额
            BigDecimal minAmount = null;
            if (info.getType() == 1) {//新手标
                param.put("type", new Integer[]{3});
            } else {
                Integer[] types = new Integer[3];
                if (info.getIsCash() == 1) {
                    types[1] = 1;
                }
                if (info.getIsInterest() == 1) {
                    types[0] = 2;
                }
                if (info.getIsDouble() == 1) {
                    types[2] = 4;
                }
                param.put("type", types);

            }
            if (info.getIsCash() == 0 && info.getIsInterest() == 0 && info.getIsDouble() == 0
                    && info.getType() != 1) {
                list = new ArrayList<DrMemberFavourable>();
            } else {
                param.put("amount", amount);
                list = drMemberFavourableService.selectByParam(param);
                minAmount = drMemberFavourableService.selectMinAmount(param);
            }
            param.clear();
            param.put("list", list);
            param.put("minAmount", minAmount);
            br.setMap(param);
            br.setSuccess(true);
        } catch (Exception e) {
            log.error("我的优惠券查询失败", e);
            br.setErrorCode("9999");
            br.setSuccess(false);

        }
        return JSON.toJSONString(br);

    }

    /**
     * 根据用户UID获取用户推荐好友列表
     */
    @RequestMapping(value = "/myRecommend", method = RequestMethod.POST)
    @ResponseBody
    public String myFrieds(PageInfo pi, HttpServletRequest req, Integer uid, @RequestParam(value = "order", defaultValue = "1", required = false) Integer order
            , @RequestParam(required = false) Integer type) {
        BaseResult br = new BaseResult();
        BigDecimal rewards = BigDecimal.ZERO;
        Map<String, Object> map = new HashMap<String, Object>();
        try {
            map.put("referrerId", uid);
            if (order == 1) {//投资状态（未投资）
                map.put("order", " order by t.addTime desc ");
            } else if (order == 2) {
                map.put("order", " order by t.addTime asc ");
            } else if (order == 3) {
                map.put("order", " order by t.referrerReward asc");
            } else if (order == 4) {
                map.put("order", " order by t.referrerReward desc ");
            }
//			map.put("startDate", redisClientTemplate.getProperties("activityStartDate"));
//			map.put("endDate", redisClientTemplate.getProperties("activityEndDate"));
            map.put("offset", pi.getPageInfo().getOffset());
            map.put("limit", 9999);
            map.put("diffDay", 30);
            map.put("type", type);
            pi = drMemberRecommendedService.getDrMemberRecommended(map);
            //rewards = drMemberFundsService.selectDrMemberFundsByUid(uid).getSpreadProfit();
            DrMember m = drMemberService.selectByPrimaryKey(uid);
            rewards = drMemberRecommendedService.getTotalProfit(m.getUid());
            //查询邀请人数
            Integer recommendedTotal = drMemberRecommendedService.getRecommendedTotal(m.getUid());
            map.clear();
            map.put("list", pi.getRows());
            map.put("total", recommendedTotal);
            map.put("investTotal", pi.getTotal());
            map.put("rewards", rewards == null ? 0 : rewards);
            map.put("recommCodes", m.getRecommCodes());
            br.setMap(map);
            br.setSuccess(true);
        } catch (Exception e) {
            log.error("我的好友查询失败", e);
            br.setErrorCode("9999");
            br.setSuccess(false);
        }
        return JSON.toJSONString(br);
    }

    /**
     * 抽奖
     *
     * @param req
     * @param param
     * @return
     */
    @RequestMapping(value = "getLotteryGift", method = RequestMethod.POST)
    @ResponseBody
    public String getLotteryGift(HttpServletRequest req, Integer uid) {
        BaseResult br = new BaseResult();
//		DrMember member = drMemberService.selectByPrimaryKey(uid);
//		if(Utils.isObjectNotEmpty(uid)||Utils.isObjectNotEmpty(member)){
//			member = drMemberService.selectByPrimaryKey(Utils.isObjectEmpty(uid)?member.getUid():Integer.parseInt(uid.toString()));
//			try {
//				//查询用户是否有参加活动资格
//				List<DrMember>  mList = drMemberService.selectMemberIsJoinActivity(member.getUid());
//				BigDecimal  amount = new BigDecimal(redisClientTemplate.get("user.invest.amount."+member.getUid()));
//				if(mList.size() > 0 && amount.compareTo(new BigDecimal(1000)) >= 0){
//					redisClientTemplate.lock(member.getUid()+"");
////					br = drMemberLotteryLogService.insertLogtteryLog(member);
//				}else{
//					br.setSuccess(false);
//					br.setErrorCode("1002");
//					br.setErrorMsg("今日机会已用完，请明日再来");
//				}
//			} catch (Exception e) {
//				br.setSuccess(false);
//				br.setErrorCode("9999");
//				log.error("用户[uid="+uid+"]抽奖失败", e);
//			}
//		}else{
//			br.setErrorCode("9998");
//			br.setSuccess(false);
//		}
        return JSON.toJSONString(br);

    }

    /**
     * 获取年化投资额
     *
     * @param req
     * @return
     */
    @RequestMapping(value = "/getAnnualInvestSumByParam", method = RequestMethod.POST)
    @ResponseBody
    public String getAnnualInvestSumByParam(HttpServletRequest req, Integer uid) {
        BaseResult br = new BaseResult();
        try {
            Map<String, Object> resultMap = new HashMap<String, Object>();

            if (Utils.isObjectNotEmpty(uid)) {
                Map<String, Object> map = new HashMap<String, Object>();
                Integer activityId = Integer.parseInt(redisClientTemplate.getProperties("online.activity.id"));
                DrActivity drActivity = drActivityService.selectByPrimaryKey(activityId);

                map.put("startDate", Utils.format(drActivity.getStartTime(), "yyyy-MM-dd HH:mm:ss"));
                map.put("endDate", Utils.format(drActivity.getEndTime(), "yyyy-MM-dd HH:mm:ss"));
                map.put("deadline", 90);
                map.put("uid", uid);
                BigDecimal annualInvestAmount = drProductInvestService.getAnnualInvestSumByParam(map);
                resultMap.put("annualInvestAmount", Utils.isObjectNotEmpty(annualInvestAmount) ? annualInvestAmount : 0);

                DrMember member = drMemberService.selectByPrimaryKey(uid);
                if (StringUtils.isBlank(member.getTpassWord())) {
                    resultMap.put("tpwdFlag", 0);
                } else {
                    resultMap.put("tpwdFlag", 1);
                }
                resultMap.put("realFlag", member.getRealVerify());
                DrMemberFunds drMemberFunds = drMemberFundsService.selectDrMemberFundsByUid(member.getUid());
                resultMap.put("funds", drMemberFunds.getBalance().setScale(2));
            } else {
                resultMap.put("annualInvestAmount", 0);
            }
            br.setMap(resultMap);
            br.setSuccess(true);
        } catch (Exception e) {
            br.setSuccess(false);
            br.setErrorCode("9999");
            log.error("十一月下半月活动", e);
        }
        return JSON.toJSONString(br);

    }
	/*@RequestMapping(value = "/getInvestMinAmount", method = RequestMethod.POST)
	@ResponseBody
	public String getInvestMinAmount(Integer pid, Integer uid,BigDecimal amount){
		BaseResult br = new BaseResult();
		try {
			Map<String,Object> param = new HashMap<String, Object>();
			DrProductInfo info = drProductInfoService.selectProductByPrimaryKey(pid);
			param.put("status", 0);
			param.put("uid", uid);
			param.put("deadline", info.getDeadline());
			list = drMemberFavourableService.selectByParam(param);
			param.put("msg","您有可用优惠券！");
			if(list == null || list.size() == 0){
				BigDecimal minAmount = drMemberFavourableService.getInvestMinAmount(param);
				if(minAmount != null && minAmount != new BigDecimal(0)){
					param.put("msg","多投"+minAmount+"元可用优惠券！");
				}
			}
			
		} catch (Exception e) {
			log.error("我的优惠券查询失败", e);
			br.setErrorCode("9999");
			br.setSuccess(false);
		}
		return JSON.toJSONString(br);
		
	}*/

    /**
     * 邀请记录
     *
     * @param uid
     * @return
     */
    @RequestMapping(value = "/recommendList", method = RequestMethod.POST)
    @ResponseBody
    public BaseResult recommendList(Integer uid) {
        BaseResult br = new BaseResult();
        Map<String, Object> map = new HashMap<String, Object>();
        try {
            List<Map<String, Object>> list = drMemberRecommendedService.getRecommendList(uid);
            map.put("list", list);
            br.setMap(map);
            br.setSuccess(true);
        } catch (Exception e) {
            br.setSuccess(false);
            log.error("查询邀请记录是发生错误", e);
        }
        return br;
    }

    /**
     * 51活动抽奖
     *
     * @param req
     * @param param
     * @return
     */
    @RequestMapping(value = "get51LotteryGift", method = RequestMethod.POST)
    @ResponseBody
    public String get51LotteryGift(HttpServletRequest req, Integer uid) {
        BaseResult br = new BaseResult();
//		DrMember member = (DrMember) req.getSession().getAttribute(ConfigUtil.FRONT_LOGIN_USER);
//		if( member == null){
//			br.setSuccess(false);
//			br.setErrorCode("1001");
//			br.setErrorMsg("您还没有登陆，请登陆！");
//		}else{
        // 活动时间
        final String startDate = "2018-4-25";
        final String endDate = "2018-5-15";
        try {
            // 查询用户是否有参加活动资格 (在活动期间外注册的用户无法参与抽奖)
            DrMember member = drMemberService.selectMemberIsHasQualification(uid, startDate, endDate);
            //查询用户是否是渠道用户
            //drMemberService.IsChannerInfoMember(member.getUid());
            if (member == null) {
                br.setSuccess(false);
                br.setErrorCode("1002");
                br.setErrorMsg("老用户和渠道用户不参与抽奖活动哦！");
            } else {
                redisClientTemplate.lock(member.getUid() + "");
                br = businessReceiveRecordService.insert51LogtteryLog(member, startDate, endDate);
            }
        } catch (Exception e) {
            br.setSuccess(false);
            br.setErrorCode("9999");
            br.setErrorMsg("抽奖失败，请重试");
            log.error("用户[uid=" + uid + "]抽奖失败", e);
        }
//		} 
        return JSON.toJSONString(br);
    }
    /**
	 * 520活动投资排名获取
	 * 
	 * @param req
	 * @param param
	 * @return
	 */
	@RequestMapping(value = "get520Activity", method = RequestMethod.POST)
	@ResponseBody
	public String get520Activity(HttpServletRequest req) {
			BaseResult br = new BaseResult();
			HashMap<String,Object> map = new HashMap<String,Object>();
			// 活动时间
			final String startDate = "2018-4-10";
			final String endDate = "2018-5-16";
			try {
				List<Map<String, Object>> investRankingList = drActivityService.selectInvestRanking(startDate,endDate);
				map.put("investRankingList", investRankingList);
				br.setSuccess(true);
				br.setMap(map);
			} catch (Exception e) {
				br.setSuccess(false);
				br.setErrorCode("9999");
				br.setErrorMsg("用户投资排名数据拉取失败");
				log.error("用户投资排名数据拉取失败", e);
			}
				return JSON.toJSONString(br);
	}

}
