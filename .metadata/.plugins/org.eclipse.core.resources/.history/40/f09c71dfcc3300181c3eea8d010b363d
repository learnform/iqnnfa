package com.dr.service.member.impl;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.dr.common.PageInfo;
import com.dr.dao.member.DrMemberDAO;
import com.dr.model.member.DrMember;
import com.dr.model.member.MemberDataForCrm;
import com.dr.service.member.DrMemberService;

@Service
@Transactional
public class DrMemberServiceImpl implements DrMemberService {

	@Autowired
	private DrMemberDAO drMemberDAO;
	
	@Override
	public PageInfo selectDrMemberList(DrMember member, PageInfo pi) {
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("mobilephone", member.getMobilephone());
		map.put("realName", member.getRealName());
		
		map.put("referrer", member.getReferrer());//推荐人
		map.put("idcards", member.getIdCards());//身份证号码
		
		map.put("offset", pi.getPageInfo().getOffset());
		map.put("limit", pi.getPageInfo().getLimit());
		List<DrMember> mList = drMemberDAO.selectDrMemberList(map);
		Integer total = drMemberDAO.selectDrMemberListCount(map);
		pi.setTotal(total);
		pi.setRows(mList);
		return pi;
	}

	@Override
	public DrMember queryDrMemberByUid(Integer uid) {
		return drMemberDAO.selectByPrimaryKey(uid);
	}

	@Override
	public DrMember queryReferrerMemberByUid(Integer uid) {
		return drMemberDAO.selectOnlyOneMember(uid);
	}

	@Override
	public PageInfo selectRegMemberInfoByParam(
			Map<String, Object> map, PageInfo pi) {
		map.put("offset", pi.getPageInfo().getOffset());
		map.put("limit", pi.getPageInfo().getLimit());
		List<Map<String, Object>> rows = drMemberDAO.selectRegMemberInfoListByParam(map);
		Integer total = drMemberDAO.selectRegMemberInfoListCountByParam(map);
		pi.setRows(rows);
		pi.setTotal(total);
		return pi;
	}

	@Override
	public void batchUpdate(List<Integer> list) throws SQLException {
		drMemberDAO.batchUpdate(list);
	}
	
	public void updateAllVIPForOrdinary() throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("isLevel", 0);
		map.put("level", 1);
		drMemberDAO.updateDrMemberByMap(map);
	}

	@Override
	public List<MemberDataForCrm> getNewRegUsers(Map<String, Object> map)
			throws Exception {
		return drMemberDAO.getNewRegUsers(map);
	}

	@Override
	public List<MemberDataForCrm> getUsersForUpdate(Map<String, Object> map) {
		return drMemberDAO.getUsersForUpdate(map);
	}

	@Override
	public Map<String, Object> getTitleParam(String startDate, String endDate) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("startDate",startDate);
		map.put("endDate",endDate);
		return drMemberDAO.getTitleParam(map);
	}

	@Override
	public List<DrMember> selectWpsDrMemberList(Map<String, Object> map) {
		// TODO Auto-generated method stub
		List<DrMember> drMemberList = drMemberDAO.selectWpsDrMemberList(map);
		return drMemberList;
	}
}
