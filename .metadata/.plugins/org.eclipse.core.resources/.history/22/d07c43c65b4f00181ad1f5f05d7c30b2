package com.dr.controller.account.funds;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.dr.common.BaseResult;
import com.dr.common.ConfigUtil;
import com.dr.common.Utils;
import com.dr.model.member.DrMember;
import com.dr.model.member.DrMemberBank;
import com.dr.model.member.DrMemberCrush;
import com.dr.model.member.DrMemberFunds;
import com.dr.model.system.SysBank;
import com.dr.model.system.SysMessageLog;
import com.dr.service.member.DrMemberBankService;
import com.dr.service.member.DrMemberCrushService;
import com.dr.service.member.DrMemberFundsService;
import com.dr.service.member.DrMemberService;
import com.dr.service.pay.fuiou.IFuiouPayService;
import com.dr.service.system.SysMessageLogService;
import com.dr.service.system.impl.RedisClientTemplate;
import com.fuioupay.vo.RechargeResponse;
import com.jytpay.AppException;
import com.jytpay.utils.DateTimeUtils;
import com.jytpay.utils.XmlMsgConstant;
import com.sftpay.config.ExpressGlobalConfig;
import com.sftpay.utils.BaseExpressService;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@RequestMapping("/recharge")
@Controller
public class RechargeController {
	private Logger log = Logger.getLogger(this.getClass());

	@Autowired
	private DrMemberCrushService payService;
	@Autowired
	private DrMemberService drMemberService;
	@Autowired
	private DrMemberFundsService drMemberFundsService;
	@Autowired
	private DrMemberBankService drMemberBankService;
	@Autowired
	public RedisClientTemplate redisClientTemplate;
	@Autowired
	private SysMessageLogService sysMessageLogService;
	@Autowired
	private IFuiouPayService fuiouService;

	@RequestMapping("/index")
	@ResponseBody
	public String index(HttpServletRequest req,Map<String,Object> model){
		BaseResult br = new BaseResult();
		DrMember member = (DrMember)req.getSession().getAttribute(ConfigUtil.FRONT_LOGIN_USER);
		if(Utils.isObjectEmpty(member)){
			br.setSuccess(false);
			br.setErrorCode("9999");
			return JSON.toJSONString(br);
		}
		try {
			DrMember drMember = drMemberService.selectByPrimaryKey(member.getUid());
			if(Utils.isObjectEmpty(drMember)){
				br.setSuccess(false);
				br.setErrorCode("9999");
				return JSON.toJSONString(br);
			}
			
			DrMemberFunds drMemberFunds = drMemberFundsService.selectDrMemberFundsByUid(drMember.getUid());
			model.put("funds",drMemberFunds.getBalance().setScale(2));
	
			model.put("realFlag",drMember.getRealVerify());
			
			if(1 == drMember.getRealVerify()){
				DrMemberBank drMemberBank = drMemberBankService.selectIdentificationBank(drMember.getUid());
				if(Utils.isObjectNotEmpty(drMemberBank)){
					drMemberBank.setBankNum(drMemberBank.getBankNum().substring(drMemberBank.getBankNum().length()-4,drMemberBank.getBankNum().length()));
				}
		        model.put("bankNum",drMemberBank.getBankNum());   
		        model.put("mobilePhone",drMemberBank.getMobilePhone().substring(0,4)+"****"+drMemberBank.getMobilePhone().substring(drMemberBank.getMobilePhone().length()-3));   
				Map<String, Object> queryMap = new HashMap<String, Object>();
				queryMap.put("bankName", drMemberBank.getBankName());
				SysBank sysBank = drMemberBankService.selectSysBank(queryMap);
				if("".equals(sysBank)||sysBank == null){
					
				}
				queryMap.clear();
				
				model.put("bankCode",sysBank.getId());
				if(1 == sysBank.getChannel()){
					model.put("quota",sysBank.getSingleQuotaJYT()); 
					model.put("dayQuota", sysBank.getDayQuotaJYT());
				}else{
					model.put("quota",sysBank.getSingleQuotaSFT());
					model.put("dayQuota", sysBank.getDayQuotaSFT());
				}
				
				model.put("bankList", drMemberBankService.selectSysBankList());
			}
			br.setMap(model);
			br.setSuccess(true);
		} catch (Exception e) {
			log.error("充值首页", e);
			br.setSuccess(false);
			br.setErrorCode("9999");
		}
		return JSON.toJSONString(br);
	}

	/**
	 * 认证充值-创建订单同时发送验证码
	 * @param req
	 * @param mobilephone
	 * @return
	 */
	@RequestMapping("/sendRechargeSms")
	@ResponseBody
	public BaseResult sendRechargeMsg(HttpServletRequest req,@RequestBody Map<String,Object> params){
		BaseResult br = new BaseResult();
		DrMember member = (DrMember)req.getSession().getAttribute(ConfigUtil.FRONT_LOGIN_USER);
		member = drMemberService.selectByPrimaryKey(member.getUid());
//		member = drMemberService.selectByPrimaryKey(23);


		DrMemberBank drMemberBank = drMemberBankService.selectIdentificationBank(member.getUid());
		if(Utils.isObjectEmpty(drMemberBank)){
			br.setSuccess(false);
			br.setErrorCode("9999");
			return br;
		}
		try{
			Object amount = params.get("amount");
			
			if(Utils.isObjectEmpty(amount)){
				br.setSuccess(false);
				br.setErrorCode("1001");
				return br;
			}
			if(new BigDecimal(amount.toString()).compareTo(new BigDecimal(3))<0){
				br.setSuccess(false);
				br.setErrorCode("1001");
				return br;
			}
			redisClientTemplate.lock("payOrder"+member.getUid().toString());
			
			String mobilePhone = drMemberBank.getMobilePhone();
			
			Object typeObj = params.get("type");
			if(Utils.isObjectEmpty(typeObj)){
				br.setSuccess(false);
				br.setErrorCode("9999");
				return br;
			}
			int type = (Integer) typeObj;
			
			Map<String, Object> queryMap = new HashMap<String, Object>();
			queryMap.put("bankName", drMemberBank.getBankName());
			SysBank sysBank = drMemberBankService.selectSysBank(queryMap);
			if(Utils.isObjectEmpty(sysBank)){
				br.setSuccess(false);
				br.setErrorCode("9999");
				return br;
			}
			
			//认证充值-创建订单
			br = payService.insertPayOrder(req,member, amount.toString(), drMemberBank,sysBank);
			if(br.isSuccess()){
				Map<String, Object> map = new HashMap<String, Object>();
				DrMemberCrush drMemberCrush = (DrMemberCrush) br.getMap().get("drMemberCrush");
//				if(1 == drMemberCrush.getType()){
//					br = sendJYTSms(mobilePhone,drMemberBank,type,member);
//					if(br.isSuccess()){
//						map.put("payNum", drMemberCrush.getPayNum());
//						br.setMap(map);
//					}
//				}else if(3 == drMemberCrush.getType()){
					br = sendFuiouSms(req,drMemberBank,drMemberCrush);
					if(br.isSuccess()){
						map.put("payNum", drMemberCrush.getPayNum());
						br.setMap(map);
					}
//				}
			}else{
				return br;
			}
		} catch (AppException e) {
			log.error("短信发送失败超时", e);
        	br.setSuccess(false);
        	br.setErrorCode("9999");
		} catch (Exception e) {
			log.error("短信发送失败", e);
			br.setSuccess(false);
			br.setErrorCode("1004");
		}
		return br;
	}
	
	/**
	 * 发送金运通充值验证码
	 * @param mobilephone 手机号
	 * @param DrMemberBank 会员银行卡信息
	 * @param type 1-金运通短信 2-金运通语音
	 * @param DrMember 会员基本信息
	 * @return BaseResult
	 * @throws Exception 
	 */
	public BaseResult sendJYTSms(String mobilePhone,DrMemberBank drMemberBank,int type,DrMember member) throws Exception{
		BaseResult br = new BaseResult();
		String redisCode = redisClientTemplate.get("rechargeMsgCode_"+mobilePhone);
		int flag = 0;
		int  seconds = 0;
		if(StringUtils.isNotEmpty(redisCode)){
			//当前时间和当前手机号码上次发送短信时间的秒数差
			seconds = Utils.getDateSecondsSub(Utils.getStrDatetime(new Date()), redisClientTemplate.get("rechargeMsgSendTime_"+mobilePhone));
			if(seconds < 59){
				if(2 == type){
					String rechargeMsgUse = redisClientTemplate.get("rechargeMsgUse_"+mobilePhone);
					if("1".equals(rechargeMsgUse)){
						br.setSuccess(false);
						br.setErrorCode("8888");//语音频繁操作
						return br;
					}else{
						seconds = 60;
					}
				}
			}else{
				redisCode = Utils.getRandomNumber6();//生成验证码		
				//短信验证码 10分钟有效
				redisClientTemplate.setex("rechargeMsgCode_"+mobilePhone, 600, redisCode);
				//短信发送时间 10分钟有效
				redisClientTemplate.setex("rechargeMsgSendTime_"+mobilePhone, 600, Utils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
			}
		}else if(StringUtils.isBlank(redisCode)){//短信内容是否存在redis中
			redisCode = Utils.getRandomNumber6();//生成验证码		
			seconds = 60;
			//短信验证码 10分钟有效
			redisClientTemplate.setex("rechargeMsgCode_"+mobilePhone, 600, redisCode);
			//短信发送时间 10分钟有效
			redisClientTemplate.setex("rechargeMsgSendTime_"+mobilePhone, 600, Utils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
		}
		if(seconds > 59){//两次时间间隔60秒，重新发送短信
			String content = redisClientTemplate.getProperties("rechargeCode")
					.replace("${1}",redisCode)
					.replace("${2}",drMemberBank.getBankNum().substring(drMemberBank.getBankNum().length()-4,drMemberBank.getBankNum().length()));
//		if(2 == type){
//			content = redisCode;
//			redisClientTemplate.setex("rechargeMsgUse_"+mobilePhone, 600, "1");
//		}
//		if(1 == type){
//			redisClientTemplate.del("rechargeMsgUse_"+mobilePhone);
//		}
			SysMessageLog logs = new SysMessageLog(member.getUid(),content,16, null, mobilePhone);
			flag = sysMessageLogService.sendMsg(logs,type);
		}else{
			flag = 1;
		}
		//短信是否发送成功
		if (flag > 0) {
			br.setSuccess(true);
		} else {
			br.setSuccess(false);
			br.setErrorCode("1004");//短信发送失败
		}
		return br;
	}
	
	/**
	 * 发送盛付通充值验证码
	 * @param HttpServletRequest
	 * @param DrMemberBank 会员银行卡信息
	 * @param DrMember 会员基本信息
	 * @param SysBank 银行卡基本信息
	 * @param sessionToken 支付token，用于后续的支付预校验和支付确认
	 * @return BaseResult
	 * @throws Exception 
	 */
	public BaseResult sendSFTSms(HttpServletRequest req,DrMember member,DrMemberBank drMemberBank,SysBank sysBank,DrMemberCrush drMemberCrush) throws Exception{
		BaseResult br = new BaseResult();
		String responseBody = "";
		//第二步.支付预校验(发送短信验证码)
		if(StringUtils.isBlank(drMemberBank.getAgreementNo())){
			NameValuePair[] smsParam = {
					new NameValuePair("merchantNo", ExpressGlobalConfig.merchantNo),
					new NameValuePair("charset", ExpressGlobalConfig.utf8),
					new NameValuePair("requestTime", Utils.getTime()),
					new NameValuePair("sessionToken",drMemberCrush.getSessionToken()),
					new NameValuePair("agreementNo", ""),
					new NameValuePair("isResendValidateCode", "false"),
					new NameValuePair("outMemberId",member.getUid().toString()),
					new NameValuePair("bankCode", sysBank.getBankJC()),
					new NameValuePair("bankCardType",ExpressGlobalConfig.bankCardType),
					new NameValuePair("bankCardNo", drMemberBank.getBankNum()),
					new NameValuePair("realName", member.getRealName()),
					new NameValuePair("idNo", member.getIdCards()),
					new NameValuePair("idType", ExpressGlobalConfig.idType),
					new NameValuePair("mobileNo", drMemberBank.getMobilePhone()),
					new NameValuePair("userIp", Utils.getIpAddr(req)),
					new NameValuePair("riskExtItems",getRiskExtItems(member,req)) };
			responseBody = BaseExpressService.httpSend(ExpressGlobalConfig.expressPrecheckForPaymentUrl, smsParam);
		}else{
			NameValuePair[] smsParam = {
				new NameValuePair("merchantNo", ExpressGlobalConfig.merchantNo),
				new NameValuePair("charset", ExpressGlobalConfig.utf8),
				new NameValuePair("requestTime", Utils.getTime()),
				new NameValuePair("sessionToken",drMemberCrush.getSessionToken()),
				new NameValuePair("agreementNo", drMemberBank.getAgreementNo()),
				new NameValuePair("isResendValidateCode", "false"),
				new NameValuePair("outMemberId",member.getUid().toString()),
				new NameValuePair("realName", member.getRealName()),
				new NameValuePair("idNo", member.getIdCards()),
				new NameValuePair("idType", ExpressGlobalConfig.idType),
				new NameValuePair("mobileNo", drMemberBank.getMobilePhone()),
				new NameValuePair("userIp", Utils.getIpAddr(req)),
				new NameValuePair("riskExtItems",getRiskExtItems(member,req)) };
			responseBody = BaseExpressService.httpSend(ExpressGlobalConfig.expressPrecheckForPaymentUrl, smsParam);
		}
		Map<String, Object> result = JSONObject.parseObject(responseBody);

		String returnMessage = result.get("returnMessage") == null ? "" : result.get("returnMessage").toString();
		String returnCode = result.get("returnCode") == null ? "" : result.get("returnCode").toString();
		String returnDetailCode = result.get("returnDetailCode") == null ? "" : result.get("returnDetailCode").toString();

		drMemberCrush.setRemark("支付预签约："+returnCode+"|"+returnDetailCode+"|"+returnMessage);

		if("SUCCESS".equals(result.get("returnCode"))){
			if("999999".equals(result.get("returnDetailCode"))){
				br.setSuccess(true);
			}else{
				drMemberCrush.setStatus(2);
				br.setErrorCode("1004");
				br.setSuccess(false);
			}
		}else{
			drMemberCrush.setStatus(2);
			br.setErrorCode("1004");
			br.setSuccess(false);
		}
		payService.updateMemberCrushById(drMemberCrush);
		return br;
	}


	public BaseResult sendFuiouSms(HttpServletRequest req, DrMemberBank drMemberBank, DrMemberCrush drMemberCrush) throws Exception{
		BaseResult br = new BaseResult();
		try {
			String userIp = Utils.getIpAddr(req);
			if(redisClientTemplate.exists("fuiou.pc.rechargeMsgSendTime:"+drMemberCrush.getUid())){
				int seconds = Utils.getDateSecondsSub(Utils.getStrDatetime(new Date()), redisClientTemplate.get("fuiou.pc.rechargeMsgSendTime:"+drMemberCrush.getUid()));
				//当前时间和当前手机号码上次发送短信时间的秒数差
				//超过180秒，重新调用富友短信接口
				if(seconds >= 60){
					//此接口需在调用3.1接口3分钟后 用户在验证码失效后，点
					//同一富友订单号，此接口只允许最多调用2次
					br = fuiouService.createRechargeOrderAndSendPhoneCode(userIp,drMemberCrush,drMemberBank,2);
					redisClientTemplate.setex("fuiou.pc.rechargeMsgSendTime:"+drMemberCrush.getUid(),60,Utils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
					//				redisClientTemplate.incr("fuiou.rechargeMsgCode:"+drMemberCrush.getPayNum());
				}else {
					br.setSuccess(false);
					br.setErrorCode("8888");//频繁操作
					return br;
				}
			}else{
				br = fuiouService.createRechargeOrderAndSendPhoneCode(userIp,drMemberCrush,drMemberBank,1);
				redisClientTemplate.setex("fuiou.pc.rechargeMsgSendTime:"+drMemberCrush.getUid(),60,Utils.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
				//			redisClientTemplate.set("fuiou.rechargeMsgCode:"+drMemberCrush.getPayNum(),String.valueOf(0));
			}
			return br;
		}catch (Exception ex){
			log.error("获取富友短信异常",ex);
			br.setSuccess(false);
			br.setErrorCode("1004");//短信发送失败
			return br;
		}
	}


	// 风控数据(JSON值需要全部为字符串)
	public String getRiskExtItems(DrMember member,HttpServletRequest req) {
		Map<String, String> map = new HashMap<String, String>();
		map.put("outMemberId", member.getUid().toString()); // 商户会员ID
		map.put("outMemberRegistTime", DateTimeUtils.getDateTimeToString(member.getRegDate(), "yyyyMMddHHmmss"));  // 商户会员在商户平台的注册时间
		map.put("outMemberRegistIP", member.getRegIp() == null ? Utils.getIpAddr(req) : member.getRegIp()); // 商户会员在商户平台注册时的IP
		map.put("outMemberVerifyStatus", "1"); // 商户会员的实名认证状态
		map.put("outMemberName", member.getRealName()); // 商户会员的姓名
		map.put("outMemberMobile", member.getMobilephone()); // 商户会员的手机号
		return JSONObject.toJSONString(map);
	}
	
	/**
	 * 快捷充值
	 * @param payNum 订单号
	 * @param smsCode 短信验证码
	 * @throws Exception
	 */
	@RequestMapping("/goPay")
	@ResponseBody
	public String goPay(HttpServletRequest req,@RequestBody Map<String, Object> params) {
		BaseResult br = new BaseResult();
		DrMember member = (DrMember) req.getSession().getAttribute(ConfigUtil.FRONT_LOGIN_USER);
		member = drMemberService.selectByPrimaryKey(member.getUid());
//		member = drMemberService.selectByPrimaryKey(23);
		
		DrMemberBank drMemberBank = drMemberBankService.selectIdentificationBank(member.getUid());

		if(Utils.isObjectEmpty(drMemberBank)){
			br.setSuccess(false);
			br.setErrorCode("9999");
			return JSON.toJSONString(br);
		}
		
		Object payNum = params.get("payNum");
		if(Utils.isObjectEmpty(payNum)){
			br.setSuccess(false);
			br.setErrorCode("1005");
			return JSON.toJSONString(br);
		}

		DrMemberCrush drMemberCrush = payService.getDrMemberCrushByPayNum(payNum.toString());
		redisClientTemplate.lock("fyRecharge.lock:"+drMemberCrush.getPayNum());
		if(Utils.isObjectEmpty(drMemberCrush)){
			br.setSuccess(false);
			br.setErrorCode("1045");//交易银行不支持或金额超限
			return JSON.toJSONString(br);
		}
		try{
			Object smsCode = params.get("smsCode");//短信验证码
			if(Utils.isObjectEmpty(smsCode)){//短信验证码为空
				br.setSuccess(false);
				br.setErrorCode("1003");
				return JSON.toJSONString(br);
			}
//			if(1 == drMemberCrush.getType()){
//				String code = redisClientTemplate.get("rechargeMsgCode_"+drMemberBank.getMobilePhone());
//				if(!smsCode.equals(code) || StringUtils.isBlank(code)){//验证码错误
//					br.setSuccess(false);
//					br.setErrorCode("1003");
//					return JSON.toJSONString(br);
//				}
//			}
			
			br = payService.savePay(req,member,drMemberBank,drMemberCrush,smsCode.toString());
			if(3 == drMemberCrush.getType()){
//				redisClientTemplate.del("rechargeMsgCode_"+drMemberBank.getMobilePhone());
//				redisClientTemplate.del("rechargeMsgSendTime_"+drMemberBank.getMobilePhone());
				redisClientTemplate.del("fuiou.pc.rechargeMsgSendTime:"+drMemberBank.getUid());
			}
		} catch (AppException e) {
			if(3 == drMemberCrush.getType()){
//				redisClientTemplate.del("rechargeMsgCode_"+drMemberBank.getMobilePhone());
//				redisClientTemplate.del("rechargeMsgSendTime_"+drMemberBank.getMobilePhone());
				redisClientTemplate.del("fuiou.pc.rechargeMsgSendTime:"+drMemberBank.getUid());
			}
			log.error("认证充值超时", e);
        	br.setSuccess(false);
        	br.setErrorCode("1004");
			return JSON.toJSONString(br);
		} catch (Exception e) {
			log.error("认证充值失败", e);
			br.setSuccess(false);
			br.setErrorCode("9999");
			return JSON.toJSONString(br);
		}
		return JSON.toJSONString(br);
	}

	/**
	 * 金运通认证充值异步通知
	 * @param req
	 * @return
	 */
	@RequestMapping("/receiveNotifyJYT")
	@ResponseBody
	public void receiveNotifyJYT(HttpServletRequest req,
			HttpServletResponse resp) {
		resp.setCharacterEncoding("UTF-8");
		try {
			payService.receiveNotifyJYT(req, resp);
		} catch (Exception e) {
			log.error("金运通认证充值异步通知失败", e);
		}
	}
	
	/**
	 * 盛付通认证充值异步通知
	 * @param req
	 * @return
	 */
	@RequestMapping("/receiveNotifySFT")
	@ResponseBody
	public String receiveNotifySFT(HttpServletRequest req,HttpServletResponse resp) {
		resp.setCharacterEncoding("UTF-8");
		String result = "";
		try {
			result = payService.receiveNotifySFT(req, resp);
		} catch (Exception e) {
			log.error("盛付通认证充值异步通知失败", e);
		}
		return result;
	}
	
//	/**
//	 * 金运通网银充值
//	 * @param amount 充值金额
//	 * @param bankCode 银行编号
//	 * @throws Exception
//	 */
//	@RequestMapping("/goJYTWYPay")
//	@ResponseBody
//	public String goJYTWYPay(HttpServletRequest req,@RequestBody Map<String, Object> params) {
//		BaseResult br = new BaseResult();
//		DrMember member = (DrMember) req.getSession().getAttribute(ConfigUtil.FRONT_LOGIN_USER);
//		try{
//			if(Utils.isObjectEmpty(member)){
//				br.setSuccess(false);
//				br.setErrorCode("9999");
//				return JSON.toJSONString(br);
//			}
//
//			Object amount = params.get("amount");
//			Object bankCode = params.get("bankCode");//银行编号
//			if(Utils.isObjectEmpty(amount)){
//				br.setSuccess(false);
//				br.setErrorCode("1001");
//				return JSON.toJSONString(br);
//			}
//			if(new BigDecimal(amount.toString()).compareTo(new BigDecimal(1))<0){
//				br.setSuccess(false);
//				br.setErrorCode("1001");
//				return JSON.toJSONString(br);
//			}
//			if(Utils.isObjectEmpty(bankCode)){
//				br.setSuccess(false);
//				br.setErrorCode("1002");
//				return JSON.toJSONString(br);
//			}
//			redisClientTemplate.lock("recharge"+member.getUid().toString());
//			Map<String,String> map = new HashMap<String, String>();
//			map = payService.insertWYDrMemberCrush(member, amount.toString(), bankCode.toString());
//			br.setSuccess(true);
//			br.setMap(map);
//		} catch (Exception e) {
//			log.error("网银充值失败", e);
//			br.setSuccess(false);
//			br.setErrorCode("9999");
//			return JSON.toJSONString(br);
//		}
//		return JSON.toJSONString(br);
//	}
//
	/**
	 * 网银同步通知
	 * 
	 * @param req
	 * @return
	 */
	@RequestMapping(value="/rechargeSuccess")
	public String rechargeSuccess(HttpServletRequest req,HttpServletResponse resp,
								  String order_st,String md5,String fy_ssn,
								  String order_pay_code,String mchnt_cd,Integer order_amt,
								  String order_pay_error,String resv1,String order_date,String order_id
								 ,Map<String,Object> model ) {
		BaseResult br = new BaseResult();
		try {
			log.info("富友网银同步回调参数为:商户代码="+mchnt_cd+",商户订单号="+order_id+",订单日期="+order_date+
					",交易金额="+order_amt+",订单状态="+order_st+",错误代码="+order_pay_code+",错误中文描述="+
					order_pay_error+",保留字段="+resv1+",富友流水号="+fy_ssn+",MD5摘要数据="+md5);
			if(!Utils.strIsNull(order_pay_code)){
				redisClientTemplate.lock("fuiouWy.lock:"+order_id);
				br = payService.saveFuiouWYPay(resp,order_st,md5,fy_ssn,order_pay_code,mchnt_cd,order_amt,order_pay_error,resv1,order_date,order_id);
				log.info("网银同步通知code为:"+order_pay_code+",msg为:"+order_pay_error);
				model.put("br", br);
			}else{
				br.setSuccess(false);
				br.setErrorCode("9999");
				model.put("br", br);
			}
		} catch (Exception e) {
			log.error("网银同步通知失败", e);
			br.setSuccess(false);
			br.setErrorCode("9999");
			model.put("br", br);
		}
		return "rechargeSuccess";
	}

	/**
	 * 金运通网银异步通知
	 *
	 * @param req
	 * @return
	 */
	@RequestMapping("/receiveNotifyJYTWY")
	@ResponseBody
	public String receiveNotifyJYTWY(HttpServletRequest req) {
		try {
			String respCode = req.getParameter("respCode");
			if(!Utils.strIsNull(respCode)){
				payService.saveJYTWYPay(req);
			}
			String respDesc = req.getParameter("respDesc");
			log.info("网银异步数据:"+"respCode:"+respCode+",respDesc:"+respDesc);
			return XmlMsgConstant.MSG_RES_CODE_SUCCESS;
		} catch (Exception e) {
			log.error("网银同步通知失败", e);
			return XmlMsgConstant.MSG_RES_CODE_SUCCESS;
		}
	}

	/**
	 * 富友快捷充值异步通知
	 *
	 * @param req
	 * @return
	 */
	@RequestMapping("/receiveNotifyFuiou")
	@ResponseBody
	public String receiveNotifyFuiou(HttpServletRequest req, HttpServletResponse res, RechargeResponse rr) {
		String response = "";
		if (req.getParameterMap().isEmpty() && rr.getMCHNTORDERID() != null){
			res.setStatus(200);
			return "9999";
		}
		log.info("富友快捷充值异步通知结果为"+rr.toString());
		try {
			redisClientTemplate.lock("fyRecharge.lock:"+rr.getMCHNTORDERID());
			response = payService.receiveNotifyFuiou(res,rr);
			return response;
		}catch (Exception e){
			res.setStatus(200);
			response="9999";
			log.error("富友快捷充值异步通知异常！",e);
			return response;
		}
	}

	/**
	 * 富友网银充值
	 * @param amount 充值金额
	 * @param bankCode 银行编号
	 * @throws Exception
	 */
//	@RequestMapping("/goFuiouWYPay")
	@RequestMapping("/goJYTWYPay")
	@ResponseBody
	public BaseResult goFuiouWYPay(HttpServletRequest req,@RequestBody Map<String, Object> params) {
		BaseResult br = new BaseResult();
		DrMember member = (DrMember) req.getSession().getAttribute(ConfigUtil.FRONT_LOGIN_USER);
//		member = drMemberService.selectByPrimaryKey(23);
		try{
			if(Utils.isObjectEmpty(member)){
				br.setSuccess(false);
				br.setErrorCode("9998");
				return br;
			}

			Object amount = params.get("amount");
			Object bankCode = params.get("bankCode");//银行编号
			if(Utils.isObjectEmpty(amount)){
				br.setSuccess(false);
				br.setErrorCode("1001");
				return br;
			}
			if(new BigDecimal(amount.toString()).compareTo(new BigDecimal(1))<0){
				br.setSuccess(false);
				br.setErrorCode("1001");
				return br;
			}
			if(Utils.isObjectEmpty(bankCode)){
				br.setSuccess(false);
				br.setErrorCode("1002");
				return br;
			}
			redisClientTemplate.lock("recharge"+member.getUid().toString());
			Map<String,Object> map = new HashMap<String, Object>();
			map = payService.insertFuiouWYDrMemberCrush(member, new BigDecimal(amount.toString()), bankCode.toString());
			br.setSuccess(true);
			br.setMap(map);
		} catch (Exception e) {
			log.error("网银充值失败", e);
			br.setSuccess(false);
			br.setErrorCode("9999");
			return br;
		}
		return br;
	}

	/**
	 * 富友网银异步通知
	 *
	 * @param req
	 * @return
	 */
	@RequestMapping("/receiveNotifyFuiouWY")
	@ResponseBody
	public BaseResult receiveNotifyFuiouWY(HttpServletRequest req,HttpServletResponse res,String mchnt_cd,String order_id,String order_date,Integer order_amt,
									 String order_st,String order_pay_code,String order_pay_error,String resv1,String fy_ssn,String md5) {
		BaseResult br = new BaseResult();
		try {
			log.info("富友网银异步回调参数为:商户代码="+mchnt_cd+",商户订单号="+order_id+",订单日期="+order_date+
					",交易金额="+order_amt+",订单状态="+order_st+",错误代码="+order_pay_code+",错误中文描述="+
					order_pay_error+",保留字段="+resv1+",富友流水号="+fy_ssn+",MD5摘要数据="+md5);
				redisClientTemplate.lock("fuiouWy.lock:"+order_id);
				br = payService.saveFuiouWYPay(res,order_st,md5,fy_ssn,order_pay_code,mchnt_cd,order_amt,order_pay_error,resv1,order_date,order_id);
				log.info("网银异步通知code为:"+order_pay_code+",msg为:"+order_pay_error);
				return br;
			}catch (Exception e){
				br.setSuccess(false);
				br.setMsg("9999");
				res.setStatus(200);
				log.error("网银充值异步通知异常！",e);
				return br;
			}
	}
	
	//盛付通解绑
	public static void main(String[] args) throws Exception {
		NameValuePair[] nameValuePairs = {
				new NameValuePair("merchantNo", "601924"),
				new NameValuePair("charset", ExpressGlobalConfig.utf8),
				new NameValuePair("requestTime", Utils.getTime()),
				new NameValuePair("agreementNo", "853285"),
				new NameValuePair("principalId", "19429")};

		String responseBody = BaseExpressService.httpSend(ExpressGlobalConfig.expressUnsignUrl, nameValuePairs);
		System.out.println(responseBody);
		Map<String, Object> result = JSONObject.parseObject(responseBody);
		System.out.println("returnCode : " + result.get("returnCode"));
		System.out.println("returnMessage : " + result.get("returnMessage"));
	}
}
