package com.dr.service.product.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.dr.common.BaseResult;
import com.dr.common.PageInfo;
import com.dr.common.PropertyUtil;
import com.dr.common.Utils;
import com.dr.dao.activity.DrMemberFavourableDAO;
import com.dr.dao.cpa.DrChannelMessageRuleDAO;
import com.dr.dao.member.DrCompanyFundsLogDAO;
import com.dr.dao.member.DrMemberAutoInvestConfDAO;
import com.dr.dao.member.DrMemberDAO;
import com.dr.dao.member.DrMemberFundsDAO;
import com.dr.dao.member.DrMemberFundsLogDAO;
import com.dr.dao.member.DrMemberFundsRecordDAO;
import com.dr.dao.member.DrMemberMsgDAO;
import com.dr.dao.member.DrMemberRecommendedDAO;
import com.dr.dao.product.DrProductInfoDAO;
import com.dr.dao.product.DrProductInvestDAO;
import com.dr.dao.product.DrProductInvestRepayInfoDAO;
import com.dr.dao.product.DrProductInvestTransferDAO;
import com.dr.dao.subject.DrSubjectInfoDAO;
import com.dr.model.activity.DrMemberFavourable;
import com.dr.model.cpa.DrChannelMessageRule;
import com.dr.model.member.DrCompanyFundsLog;
import com.dr.model.member.DrMember;
import com.dr.model.member.DrMemberAutoInvestConf;
import com.dr.model.member.DrMemberFunds;
import com.dr.model.member.DrMemberFundsLog;
import com.dr.model.member.DrMemberFundsRecord;
import com.dr.model.member.DrMemberMsg;
import com.dr.model.member.DrMemberRecommended;
import com.dr.model.product.DrAutoReward;
import com.dr.model.product.DrProductInfo;
import com.dr.model.product.DrProductInvest;
import com.dr.model.product.DrProductInvestRepayInfo;
import com.dr.model.product.DrProductInvestTransfer;
import com.dr.model.subject.DrSubjectInfo;
import com.dr.model.system.SysMessageLog;
import com.dr.service.activity.DrRecommendedSettingsService;
import com.dr.service.product.DrProductInvestService;
import com.dr.service.system.SysMessageLogService;

@Service
@Transactional
public class DrProductInvestServiceImpl implements DrProductInvestService {
	private static Logger log = Logger.getLogger(DrProductInvestServiceImpl.class);
	
	@Autowired
	private DrProductInvestDAO drProductInvestDAO;
	@Autowired
	private DrProductInfoDAO drProductInfoDAO;
	@Autowired
	private DrMemberFundsDAO drMemberFundsDAO;
	@Autowired
	private DrMemberFundsLogDAO drMemberFundsLogDAO;
	@Autowired
	private DrMemberFundsRecordDAO drMemberFundsRecordDAO;
	@Autowired
	private DrProductInvestRepayInfoDAO drProductInvestRepayInfoDAO;
	@Autowired
	private DrMemberMsgDAO drMemberMsgDAO;
	@Autowired
	private DrCompanyFundsLogDAO drCompanyFundsLogDAO;
	@Autowired
	private SysMessageLogService sysMessageLogService;
	@Autowired
	private DrMemberDAO drMemberDAO;
	@Autowired
	private DrRecommendedSettingsService drRecommendedSettingsService;
	@Autowired
	private DrMemberRecommendedDAO drMemberRecommendedDAO;
	@Autowired
	private DrProductInvestTransferDAO drProductInvestTransferDAO;
	@Autowired
	private DrMemberFavourableDAO drMemberFavourableDAO;
	@Autowired
	private DrMemberAutoInvestConfDAO drMemberAutoInvestConfDAO;
	@Autowired
	private DrChannelMessageRuleDAO drChannelMessageRuleDAO;
	@Autowired
	private DrSubjectInfoDAO drSubjectInfoDAO;
	
	@Override
	public BaseResult getDrProductInvestList(DrProductInvest drProductInvest,PageInfo pi) {
		Map<String,PageInfo> resultMap = new HashMap<String,PageInfo>();
		Map<String,Object> map=new HashMap<String,Object>();
		map.put("scode", drProductInvest.getScode());
		map.put("realname", drProductInvest.getRealname());
		map.put("code", drProductInvest.getCode());
		map.put("startDate", drProductInvest.getStartDate());
		map.put("endDate", drProductInvest.getEndDate());
		map.put("offset",pi.getPageInfo().getOffset()); 
		map.put("limit",pi.getPageInfo().getLimit()); 
		List<DrProductInvest> list = drProductInvestDAO.getDrProductInvestList(map);
		for (DrProductInvest invest : list) {
			String mobilephone = String.valueOf(invest.getMobilePhone());
			invest.setMobilephone(mobilephone.substring(0,2)+"****");
		}
		Integer total = drProductInvestDAO.getDrProductInvestCounts(map);
		pi.setTotal(total);
		pi.setRows(list);
		resultMap.put("page", pi);
		BaseResult br = new BaseResult();
		br.setMap(resultMap);
		return br;
	}

	@Override
	public BigDecimal getDrProductInvestByTime(Integer uid, Integer period) {
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("uid", uid);
		map.put("period", period);
		BigDecimal investAmount = BigDecimal.ZERO;
		investAmount = drProductInvestDAO.getDrProductInvestByTime(map);
		return investAmount;
	}

	@Override
	public BaseResult selectInvestLogByParam(Map<String, Object> map,
			PageInfo pi) {
		map.put("offset",pi.getPageInfo().getOffset()); 
		map.put("limit",pi.getPageInfo().getLimit()); 
		List<DrProductInvest> list = drProductInvestDAO.selectInvestLogByParam(map);
		Integer total = drProductInvestDAO.getDrProductInvestCounts(map);
		map.clear();
		pi.setTotal(total);
		pi.setRows(list);
		map.put("page", pi);
		BaseResult br = new BaseResult();
		br.setMap(map);
		return br;
	}

	@Autowired
	public List<DrProductInfo> selectExpireProductInfo(){
		return drProductInfoDAO.selectExpireProductInfo();
	}
	@Override
	public void saveInvestRepay(DrProductInfo info) throws Exception {
		Map<Integer,DrMemberFunds> fundsMap = new HashMap<Integer, DrMemberFunds>();
		List<SysMessageLog> smsList = new ArrayList<SysMessageLog>();
		Date now = new Date();//还款时间
		StringBuffer buff = new StringBuffer();
		
		List<DrProductInvestRepayInfo> repayList = drProductInvestRepayInfoDAO.selectShouldRepayInfo(info.getId());
		BigDecimal infoInterest = BigDecimal.ZERO;//支付总利息
		BigDecimal infoPrincipal = BigDecimal.ZERO;
		if(repayList.size()>0){
			for (int j = 0, length = repayList.size(); j < length; j++) {
				//回款信息
				DrProductInvestRepayInfo repayInfo = repayList.get(j);
				repayInfo.setFactPrincipal(repayInfo.getShouldPrincipal());
				repayInfo.setFactInterest(repayInfo.getShouldInterest());
				repayInfo.setFactTime(now);
				repayInfo.setStatus(1);//已还款
				infoInterest = infoInterest.add(repayInfo.getShouldInterest());
				infoPrincipal = infoPrincipal.add(repayInfo.getShouldPrincipal());
				
				DrMember member = drMemberDAO.selectByPrimaryKey(repayInfo.getUid());
				
				//资金变动
				DrMemberFunds funds = null;
				if(fundsMap.containsKey(repayInfo.getUid())){
					funds = fundsMap.get(repayInfo.getUid());
				}else{
					funds = drMemberFundsDAO.queryDrMemberFundsByUid(repayInfo.getUid());
				}
				funds.setBalance(funds.getBalance().add(repayInfo.getFactPrincipal()).add(repayInfo.getFactInterest()));//账户余额
				funds.setWprincipal(funds.getWprincipal().subtract(repayInfo.getFactPrincipal()));//待收本金
				funds.setWinterest(funds.getWinterest().subtract(repayInfo.getFactInterest()));//待收利息
				funds.setInvestProfit(funds.getInvestProfit().add(repayInfo.getFactInterest()));//投资收益
				drMemberFundsDAO.updateDrMemberFunds(funds);
				fundsMap.put(repayInfo.getUid(), funds);
				
				DrMemberFundsRecord fundsRecord = new DrMemberFundsRecord(repayInfo.getPid(), repayInfo.getInvestId(), repayInfo.getUid(),
						6, 1, repayInfo.getFactInterest().add(repayInfo.getFactPrincipal()), funds.getBalance(), 3, "产品【"+info.getFullName()+"】回款", null);
				drMemberFundsRecordDAO.insert(fundsRecord);
				
				DrMemberFundsLog fundsLog = new DrMemberFundsLog(repayInfo.getUid(), fundsRecord.getId(), repayInfo.getFactInterest().add(repayInfo.getFactPrincipal()),
						11, 1, "产品【"+info.getFullName()+"】回款");
				
				drMemberFundsLogDAO.insertDrMemberFundsLog(fundsLog);
				
				//回款成功站内信
				DrMemberMsg msg = new DrMemberMsg(repayInfo.getUid(), 0, 3, "回款通知", now, 0, 0,
						PropertyUtil.getProperties("paymentMsg")
						.replace("${fullName}", info.getFullName())
						.replace("${amount}", repayInfo.getFactInterest().add(repayInfo.getFactPrincipal()).toString())
						.replace("${principal}", repayInfo.getFactPrincipal().toString())
						.replace("${interest}", repayInfo.getFactInterest().toString()));
				drMemberMsgDAO.insertDrMemberMsg(msg);
				
				SysMessageLog smslog = new SysMessageLog(repayInfo.getUid(), PropertyUtil.getProperties("paymentSms")
						.replace("${realName}", member.getRealName())
						.replace("${fullName}", info.getFullName())
						.replace("${principal}", repayInfo.getFactPrincipal().toString())
						.replace("${interest}", repayInfo.getFactInterest().toString()),
						14, Utils.parseDate(Utils.format(now, "yyyy-MM-dd 9:mm:ss"),"yyyy-MM-dd HH:mm:ss"), member.getMobilephone());
				smsList.add(smslog);
				
				drProductInvestRepayInfoDAO.updateById(repayInfo);
				buff.append(repayInfo.getInvestId()+",");
				
			}
			DrCompanyFundsLog cfundsLog = new DrCompanyFundsLog(7, null, info.getId(), infoPrincipal, 0, "产品【"+info.getFullName()+"】到期,支付本金", null);
			drCompanyFundsLogDAO.insertDrCompanyFundsLog(cfundsLog);
			cfundsLog = new DrCompanyFundsLog(8, null, info.getId(), infoInterest, 0, "产品【"+info.getFullName()+"】到期,支付利息", null);
			drCompanyFundsLogDAO.insertDrCompanyFundsLog(cfundsLog);
			if(info.getType() == 2 || info.getType() == 3 || info.getType() == 5 || info.getType() == 6){
				info.setStatus(9);
				drProductInfoDAO.updateDrProductInfoStatusById(info.getStatus(), info.getId());
				
//					//修改标的剩余金额
//					DrSubjectInfo drSubjectInfo = drSubjectInfoDAO.getDrSubjectInfoByid(info.getSid());//标的以及部分贷款项目信息
//					drSubjectInfo.setSurplusAmount(drSubjectInfo.getSurplusAmount().add(info.getAmount()));
//					drSubjectInfoDAO.updateDrSubjectInfo(drSubjectInfo);
			}
		}
			
		if(fundsMap.values().size()>0){
			drMemberFundsDAO.batchUpdateDrMemberFunds(new ArrayList<DrMemberFunds>(fundsMap.values()));
		}
		if(buff.toString().length()>0){
			drProductInvestDAO.updateStatusByIds("3", buff.toString().substring(0, buff.lastIndexOf(",")).split(","));
		}
		//短信发送
		for (int i = 0, length = smsList.size(); i < length; i++) {
			sysMessageLogService.sendMsg(smsList.get(i));
		}
		
		//更新标的的剩余金额
		/*BigDecimal surplusAmountOld = drSubjectInfoDAO.getSurplusAmountById(info.getSid());
		if(surplusAmountOld != null){
			DrSubjectInfo drSubjectInfo = new DrSubjectInfo();
			drSubjectInfo.setId(info.getSid());
			drSubjectInfo.setSurplusAmount(surplusAmountOld.add(info.getAlreadyRaiseAmount()));
			drSubjectInfoDAO.updateDrSubjectInfo(drSubjectInfo);
		}*/
		
		//修改标的剩余金额
		if(null != info.getSid() && info.getType() != 1)
		{
		  DrSubjectInfo drSubjectInfo = drSubjectInfoDAO.getDrSubjectInfoByid(info.getSid());//标的以及部分贷款项目信息
		  //更正取值，由万元更正到元
		  drSubjectInfo.setAmount(drSubjectInfo.getAmount().multiply(new BigDecimal(10000)));
		  drSubjectInfo.setSurplusAmount(drSubjectInfo.getSurplusAmount().multiply(new BigDecimal(10000)));
		  drSubjectInfo.setSurplusAmount(drSubjectInfo.getSurplusAmount().add(info.getAmount()));
		  drSubjectInfoDAO.updateDrSubjectInfo(drSubjectInfo);
		}
		
	}

	@Override
	public void updateFriendsFirstInvestmentReward() throws Exception {
		//获取首投用户
		List<Integer> uidList =drProductInvestDAO.getForFirstTimeInvestmentMember();
		//存放需要修改首投记录
		List<DrMemberRecommended> recList = new ArrayList<DrMemberRecommended>();
		if(!Utils.isEmptyList(uidList)){
			for(Integer uid:uidList){
				//获取此用户的首投记录
				DrProductInvest invest = drProductInvestDAO.getForFirstTimeInvestmentByUid(uid);
				//关系表
				DrMemberRecommended drMemberRecommended = new DrMemberRecommended();
				if(Utils.isObjectNotEmpty(invest)){
					//获取投资用户详细信息
					DrMember m=drMemberDAO.selectByPrimaryKey(uid);
					//首投记录  期限大于7天并且投资时间在注册日期起30天之内
					if(invest.getDeadline()>=7 && Utils.getQuot(invest.getInvestTime(), m.getRegDate())<=30){
						DrMember referrer=null;
						if(null==m.getIsParticipation() || (null!=m.getIsParticipation()&&m.getIsParticipation()==0)){
							referrer = drMemberDAO.selectOnlyOneMember(uid);
						}

						if(Utils.isObjectEmpty(referrer)){
							//如果没有推荐人，更新用户首投记录
							drMemberRecommended.setUid(uid);
							drMemberRecommended.setInvestTime(invest.getInvestTime());
							drMemberRecommended.setAmount(invest.getFactAmount());
							recList.add(drMemberRecommended);
							continue;
						}	
						
						BigDecimal rebate = drRecommendedSettingsService.FriendRecommendedRebate(invest);
						//修改关系表投资记录
						drMemberRecommended.setUid(uid);
						drMemberRecommended.setInvestTime(invest.getInvestTime());
						drMemberRecommended.setAmount(invest.getFactAmount());
						drMemberRecommended.setReferrerReward(rebate);
						recList.add(drMemberRecommended);
						
						if(rebate.compareTo(BigDecimal.ZERO)>0){
							DrMemberFunds funds = drMemberFundsDAO.queryDrMemberFundsByUid(referrer.getUid());
							funds.setBalance(funds.getBalance().add(rebate));//添加到推荐人余额
							funds.setSpreadProfit(funds.getSpreadProfit().add(rebate));//添加推荐人推广利益
							drMemberFundsDAO.updateDrMemberFunds(funds);
							//添加推荐人资金日志
							DrMemberFundsRecord fundsRecord = new DrMemberFundsRecord(invest.getPid(), invest.getId(), referrer.getUid(), 4, 1, rebate, funds.getBalance(), 3, "好友投资返利", null);
							//公司日志
							DrCompanyFundsLog companyLog = new DrCompanyFundsLog(13, referrer.getUid(), invest.getPid(), rebate, 0, "支付好友推荐返利("+m.getRealName()+"投资"+invest.getFullName()+"产品"+invest.getFactAmount()+"元)", null);
							drMemberFundsRecordDAO.insert(fundsRecord);
							//添加推荐人资金日志详细
							DrMemberFundsLog log = new DrMemberFundsLog(referrer.getUid(), fundsRecord.getId(), rebate, 16, 1, "好友投资返利");
							drMemberFundsLogDAO.insertDrMemberFundsLog(log);
							drCompanyFundsLogDAO.insertDrCompanyFundsLog(companyLog);
						}
					}else{
						drMemberRecommended.setUid(uid);
						drMemberRecommended.setInvestTime(invest.getInvestTime());
						drMemberRecommended.setAmount(invest.getFactAmount());
						recList.add(drMemberRecommended);
					}
				}
			}
		}
		if(!Utils.isEmptyList(recList)){
			drMemberRecommendedDAO.batchUpdate(recList);
		}
	}
	
	@Override
	public List<String> selectUidByName(String realName){
		return drProductInvestDAO.selectUidByName(realName);
	}
	
	@Override
	public Integer selectUidByPhone(Long mobilePhone){
		return drProductInvestDAO.selectUidByPhone(mobilePhone);
	}
	
	@Override
	public PageInfo selectInvestMemberInfoListByParam(Map<String, Object> map,
			PageInfo pi) {
		map.put("offset", pi.getPageInfo().getOffset());
		map.put("limit", pi.getPageInfo().getLimit());
		List<Map<String, Object>> list = drProductInvestDAO.selectInvestMemberInfoListByParam(map);
		Map<String,Object> m = drProductInvestDAO.selectInvestMemberInfoListCountByParam(map);
		List<Map<String,Object>> footer = drProductInvestDAO.selectInvestPageCountByParam(map);

		pi.setRows(list);
		pi.setTotal(Integer.parseInt(m.get("total").toString()));
		Map<String,Object> ss = new HashMap<String, Object>();
		footer.add(m);
		pi.setFooter(footer);
		return pi;
	}

	@Override
	public void insertInvestTransfer() {
		//查询要做债权匹配的产品
		List<DrProductInfo> infoList = drProductInfoDAO.selectTransferProductInfo();
		List<DrProductInvestTransfer> list = new ArrayList<DrProductInvestTransfer>();
		if(infoList.size()>0){
			for (DrProductInfo info : infoList) {
				//受让人投资记录
				List<DrProductInvest> assigneeList = drProductInvestDAO.selectProductInvestByPid(info.getId());
				//转让人投资记录
				List<DrProductInvest> transferList = drProductInvestDAO.selectProductInvestByPid(info.getFid());
				outer:
				for (int i = 0, length = transferList.size(); i < length; i++) {
					DrProductInvest tInvest =  transferList.get(i);
					
					for (int j = 0, length1 = assigneeList.size() ; j < length1; j++) {
						DrProductInvest drProductInvest =  assigneeList.get(j);
						//求两笔投资的差额
						BigDecimal amount = tInvest.getTransferSurplusAmount().subtract(drProductInvest.getTransferSurplusAmount()); 
						
						if(amount.compareTo(BigDecimal.ZERO)>0){//转让金额大于投资金额 
							DrProductInvestTransfer t = new DrProductInvestTransfer(tInvest.getUid(), drProductInvest.getUid(), info.getId(),
									tInvest.getId(), drProductInvest.getId(), new Date(), drProductInvest.getTransferSurplusAmount());
							list.add(t);
							tInvest.setTransferSurplusAmount(amount.abs());
							assigneeList.remove(j);
							j--;
							
						}else if(amount.compareTo(BigDecimal.ZERO)==0){
							DrProductInvestTransfer t = new DrProductInvestTransfer(tInvest.getUid(), drProductInvest.getUid(), info.getId(),
									tInvest.getId(), drProductInvest.getId(), new Date(), tInvest.getTransferSurplusAmount());
							list.add(t);
							assigneeList.remove(j);
							continue outer;
						}else {
							DrProductInvestTransfer t = new DrProductInvestTransfer(tInvest.getUid(), drProductInvest.getUid(), info.getId(),
									tInvest.getId(), drProductInvest.getId(), new Date(), tInvest.getTransferSurplusAmount());
							list.add(t);
							drProductInvest.setTransferSurplusAmount(amount.abs());
							continue outer;
						}
						
					}
					
				}
				drProductInfoDAO.updateMappingStatusByPid(info.getId());
			}
			drProductInvestTransferDAO.batchInsert(list);
		}
	}

	@Override
	public List<Map<String, Object>> QueryChannelInvestList(
			Map<String, Object> map) throws Exception {
		List<Map<String, Object>> list = drProductInvestDAO.QueryChannelInvestList(map);
		Map<String, Object> resultMap;
		List<Map<String, Object>> resultList = new ArrayList<Map<String,Object>>();
		for (Iterator iterator = list.iterator(); iterator.hasNext();) {
			Map<String, Object> ite = (Map<String, Object>) iterator.next();
			resultMap = new HashMap<String, Object>();
			resultMap.put("User_name", Utils.getHanyuToPinyin(ite.get("realName").toString()));
			resultMap.put("Order_no", ite.get("id"));
			resultMap.put("Pro_name", ite.get("fullName"));
			resultMap.put("Pro_id", ite.get("pid"));
			resultMap.put("Invest_money", ite.get("amount"));
			resultMap.put("Actual_invest_money", map.get("factAmount"));
			resultMap.put("Rate", ite.get("rate"));
			resultMap.put("Invest_start_date", ite.get("investTime"));
			resultMap.put("Invest_end_date", Utils.parse(Utils.format(Utils.getDayNumOfAppointDate(Utils.format(ite.get("expireDate").toString(), "yyyy-MM-dd"),1),"yyyy-MM-dd 23:59:59"),"yyyy-MM-dd HH:mm:ss"));
			resultMap.put("Invest_full_scale_date", ite.get("fullDate"));
			resultMap.put("Commission_date", Utils.parse(Utils.format(Utils.getDayNumOfAppointDate(Utils.format(ite.get("expireDate").toString(), "yyyy-MM-dd"),1),"yyyy-MM-dd 23:59:59"),"yyyy-MM-dd HH:mm:ss"));
			resultMap.put("Cust_key", ite.get("uid"));
			resultList.add(resultMap);
		}
		return resultList;
	}

	@Override
	public void investAutoInvest(DrProductInfo info, DrMemberAutoInvestConf conf, DrAutoReward reward)
			throws Exception {
		 
		DrMemberFunds funds = drMemberFundsDAO.queryDrMemberFundsByUid(conf.getUid());
		if(funds.getBalance().compareTo(conf.getAmount())<0 || funds.getBalance().compareTo(conf.getBalance())<0
				|| funds.getBalance().subtract(conf.getAmount()).compareTo(conf.getBalance()) < 0){
			return ;
		}
		
		Integer fid = null;//优惠券ID
		BigDecimal faProfit = BigDecimal.ZERO;
		
		if(conf.getUseCoupon()==1){//使用优惠券
			//查询优惠幅度最大的优惠券，  计算最大收益
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("uid", conf.getUid());//用户ID
			map.put("amount", conf.getAmount());//投资金额
			map.put("deadline", info.getDeadline());
			List<DrMemberFavourable> listfa = drMemberFavourableDAO.selectTopCouponGroupByType(map);
			
			
			for (int i = 0, length = listfa.size(); i < length; i++) {
				DrMemberFavourable fa = listfa.get(i);
				if(fa.getType() == 1 && info.getIsCash() == 1){//返现红包
					if(faProfit.compareTo(fa.getAmount())<0){
						faProfit = fa.getAmount();
						fid = fa.getId();
					}
				}else if(fa.getType() == 2 && info.getIsInterest()==1){
					BigDecimal rate = Utils.nwdDivide(Utils.nwdDivide(fa.getRaisedRates(), 100), 360);
					BigDecimal profit = conf.getAmount().multiply(rate).multiply(new BigDecimal(info.getDeadline())).setScale(2, BigDecimal.ROUND_FLOOR);
					if(faProfit.compareTo(profit)<0){
						faProfit = profit;
						fid = fa.getId();
					}
				}else if(fa.getType() == 4 && info.getIsDouble() == 1){
					BigDecimal rate = Utils.nwdDivide(Utils.nwdDivide(info.getRate(), 100), 360).multiply(fa.getMultiple());
					BigDecimal profit = conf.getAmount().multiply(rate).multiply(new BigDecimal(info.getDeadline())).setScale(2, BigDecimal.ROUND_FLOOR);
					if(faProfit.compareTo(profit)<0){
						faProfit = profit;
						fid = fa.getId();
					}
				}
			}
			if(fid != null){
				DrMemberFavourable fa = new DrMemberFavourable();
				fa.setId(fid);
				fa.setStatus(1);
				fa.setUsedTime(new Date());
				drMemberFavourableDAO.updateByPrimaryKey(fa);
			}
		}
		
		
		// 插入投资记录
		DrProductInvest invest = new DrProductInvest();
		invest.setAmount(conf.getAmount());
		invest.setUid(conf.getUid());
		invest.setJoinType(0);// 投资渠道
		invest.setStatus(0);
		invest.setMethod(1);
		invest.setPid(info.getId());
		invest.setFid(fid);
		BigDecimal dayRate = Utils.nwdDivide(Utils.nwdDivide(info.getRate().add(info.getActivityRate()), 100), 360);
		invest.setInterest(conf.getAmount().multiply(dayRate).multiply(new BigDecimal(info.getDeadline())).setScale(2, BigDecimal.ROUND_FLOOR));
		invest.setInvestTime(new Date());
		drProductInvestDAO.insertSelective(invest);

		// 用户资金记录
		funds.setBalance(funds.getBalance().subtract(conf.getAmount()));
		funds.setFreeze(funds.getFreeze().add(conf.getAmount()));
		
		info.setAlreadyRaiseAmount(info.getAlreadyRaiseAmount().add(conf.getAmount()));
		info.setSurplusAmount(info.getSurplusAmount().subtract(conf.getAmount()));
		if(info.getSurplusAmount().compareTo(BigDecimal.ZERO) == 0 ){
			info.setStatus(6);
			info.setIsHot(0);
			info.setFullDate(new Date());
		}
		drProductInfoDAO.updateDrProductInfo(info);

		DrMemberFundsRecord fundsRecord = new DrMemberFundsRecord(info.getId(),invest.getId(), conf.getUid(), 3, 0, conf.getAmount(),
				funds.getBalance(), 4, "投资【" + info.getFullName() + "】产品",null);
		drMemberFundsRecordDAO.insert(fundsRecord);

		DrMemberFundsLog fundslog = new DrMemberFundsLog(conf.getUid(), fundsRecord.getId(), conf.getAmount(), 3, 0,
				"投资【"+info.getFullName()+"】产品,资金冻结");
		drMemberFundsLogDAO.insertDrMemberFundsLog(fundslog);

		if(conf.getLastUseTime() == null 
				&& reward != null 
				&& reward.getStartAmount().compareTo(conf.getAmount())<1){
			DrMemberFundsRecord record = new DrMemberFundsRecord(info.getId(), null, invest.getUid(), 4, 1,
					reward.getRewardRed(),funds.getBalance().add(reward.getRewardRed()), 3,
					"首次自动投标奖励", null);
			drMemberFundsRecordDAO.insert(record);
			
			DrMemberFundsLog logs = new DrMemberFundsLog(invest.getUid(), fundsRecord.getId(), reward.getRewardRed(),
					20, 1, "首次自动投标奖励");
			drMemberFundsLogDAO.insertDrMemberFundsLog(logs);
			
			DrCompanyFundsLog cfundsLog = new DrCompanyFundsLog(11, invest.getUid(), info.getId(), reward.getRewardRed(),
					0, "首次自动投标奖励", 0);
			drCompanyFundsLogDAO.insertDrCompanyFundsLog(cfundsLog);
			funds.setBalance(funds.getBalance().add(reward.getRewardRed()));
			funds.setInvestProfit(funds.getInvestProfit().add(reward.getRewardRed()));
		}
		drMemberFundsDAO.updateDrMemberFunds(funds);
		
		conf.setLastUseTime(invest.getInvestTime());
		drMemberAutoInvestConfDAO.updateByUid(conf);
		
		try {
			Map<String, Object> param = new HashMap<String, Object>();
			param.put("uid", invest.getUid());
			param.put("deadline", info.getDeadline());
			param.put("amount", invest.getAmount());
			List<DrChannelMessageRule> rList = drChannelMessageRuleDAO.selectMemberChannelCodeMsgRule(param);
			for (DrChannelMessageRule rule : rList) {
				if(invest.getInvestTime().after(rule.getStartTime())&&invest.getInvestTime().before(rule.getEndTime())){
					DrMemberMsg msg = new DrMemberMsg(invest.getUid(), 0, 3, "投资成功", new Date(), 0, 0,"");
					if(rule.getFirstCast() == 1){
						param.clear();
						param.put("uid", invest.getUid());
						param.put("deadline", rule.getDeadline());
						param.put("amount", rule.getAmount());
						param.put("startDate", Utils.format(rule.getStartTime(), "yyyy-MM-dd"));
						param.put("endDate", Utils.format(rule.getEndTime(), "yyyy-MM-dd"));
						Integer count = drProductInvestDAO.getDrProductInvestCounts(param);
						if(count <= 1){
							msg.setContent(rule.getMessage());
							drMemberMsgDAO.insertDrMemberMsg(msg);
						}
					}else{
						msg.setContent(rule.getMessage());
						drMemberMsgDAO.insertDrMemberMsg(msg);
					}
				}
			}
		} catch (Exception e) {
			log.error("投资发送额外渠道站内信失败", e);
		}
		
		// 发送站内信
		String str = "尊敬的用户，您已成功投资"+info.getFullName()+",金额"+invest.getAmount()+"元，次日开始计息，敬请期待！";
		DrMemberMsg msg = new DrMemberMsg(conf.getUid(),0,3,"自动投标",new Date(),0,0, str);
		drMemberMsgDAO.insertDrMemberMsg(msg);
	}

	@Override
	public List<Integer> getProductInvestByVip() {
		return drProductInvestDAO.getProductInvestByVip();
	}

	@Override
	public BaseResult getInvestLog(DrProductInvest drProductInvest, PageInfo pi) {
		Map<String, PageInfo> resultMap=new HashMap<String, PageInfo>();
		Map<String, Object> map =new HashMap<String, Object>();
		map.put("mobilePhone", drProductInvest.getMobilePhone());
		map.put("realname", drProductInvest.getRealname());
		map.put("investTime", drProductInvest.getInvestTime());
		map.put("endDate", drProductInvest.getEndDate());
		List<DrProductInvest> list= drProductInvestDAO.getInvestLog(map);
		Integer total=drProductInvestDAO.getInvestLogCount(map);
		pi.setTotal(total);
		pi.setRows(list);
		resultMap.put("page", pi);
		BaseResult br =new BaseResult();
		br.setMap(resultMap);
		return br;	
	}

	@Override
	public List<DrProductInvest> getInvestsByTime(Map<String, Object> map) {
		// TODO Auto-generated method stub
		return drProductInvestDAO.getInvestsByTime(map);
	}

	@Override
	public Map<String, Integer> getTitleParam(String startDate, String endDate) {
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("startDate",startDate);
		map.put("endDate",endDate);
		return drProductInvestDAO.getTitleParam(map);
	}
}
