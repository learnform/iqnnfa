package com.dr.service.product.impl;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.dr.dao.activity.DrMemberFavourableDAO;
import com.dr.model.activity.DrMemberFavourable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.dr.common.BaseResult;
import com.dr.common.PageInfo;
import com.dr.common.Utils;
import com.dr.dao.activity.DrGiftCardSetUpDAO;
import com.dr.dao.activity.DrGiftCardSetUpDetailDAO;
import com.dr.dao.member.DrMemberMsgDAO;
import com.dr.dao.product.DrProductInfoDAO;
import com.dr.dao.product.DrProductInvestDAO;
import com.dr.model.activity.DrGiftCardSetUp;
import com.dr.model.activity.DrGiftCardSetUpDetail;
import com.dr.model.member.DrMember;
import com.dr.model.member.DrMemberMsg;
import com.dr.model.product.DrProductInfo;
import com.dr.model.product.DrProductInvest;
import com.dr.service.product.DrProductInvestService;
import com.dr.service.system.impl.RedisClientTemplate;

@Service
@Transactional
public class DrProductInvestServiceImpl implements DrProductInvestService {
	@Autowired
	private DrProductInvestDAO drProductInvestDAO;
	@Autowired
	private DrMemberMsgDAO drMemberMsgDAO;
	@Autowired
	private RedisClientTemplate redisClientTemplate;
	@Autowired
	private DrGiftCardSetUpDAO drGiftCardSetUpDAO;
	@Autowired
	private DrGiftCardSetUpDetailDAO drGiftCardSetUpDetailDAO;
	@Autowired
	private DrProductInfoDAO drProductInfoDAO;
	@Autowired
	private DrMemberFavourableDAO drMemberFavourableDAO;

	@SuppressWarnings("unchecked")
	@Override
	public BaseResult selectInvestLogByParam(Map<String, Object> map,PageInfo pi) throws Exception {
		map.put("offset", pi.getPageInfo().getOffset());
		map.put("limit", pi.getPageInfo().getLimit());
		int offset=pi.getPageInfo().getOffset();
		int limit=pi.getPageInfo().getLimit();
		List<DrProductInvest> list = drProductInvestDAO.selectInvestLogByParam(map);
		Integer total = drProductInvestDAO.selectInvestLogCountByParam(map);
		//计算优惠券收益
		BigDecimal repairRate = BigDecimal.ZERO;//补标利率
		BigDecimal interestProfit = BigDecimal.ZERO;//应得总利息
		DrProductInfo info = null;
		for (DrProductInvest invest:list) {
			if (invest.getFactInterest().compareTo(BigDecimal.ZERO)==0 && invest.getStatus() == 0){
				info = drProductInfoDAO.selectProductByPrimaryKey(invest.getPid());
				if (info==null){
					continue;
				}
				interestProfit = getInvestProfit(info, invest,  repairRate);
				invest.setFactInterest(interestProfit);
			}
		}
		//Collections.sort(list);
		/*int num=0;
		if(offset+10>list.size())
		{
			num=list.size();
		}else
		{
			num=offset+limit;
		}*/
		//List<DrProductInvest> returnDrProductInvest=list.subList(offset,num );
		map.clear();
		pi.setTotal(total);
		pi.setRows(list);
		map.put("page", pi);
		BaseResult br = new BaseResult();
		br.setMap(map);
		return br;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public BaseResult selectInvestLogByParamForProduct(Map<String, Object> map,PageInfo pi) {
		map.put("offset", pi.getPageInfo().getOffset());
		map.put("limit", pi.getPageInfo().getLimit());
		int offset=pi.getPageInfo().getOffset();
		int limit=pi.getPageInfo().getLimit();
		//添加投资总额
		DrProductInfo productInfo = drProductInfoDAO.selectProductByPrimaryKey((Integer) map.get("pid"));
		
		List<DrProductInvest> list = drProductInvestDAO.selectInvestLogByParamForPage(map);
		Integer total = drProductInvestDAO.selectInvestLogCountByParam(map);
		Collections.sort(list);
		int num=0;
		if(offset+10>list.size())
		{
			num=list.size();
		}else
		{
			num=offset+limit;
		}
		List<DrProductInvest> returnDrProductInvest=list.subList(offset,num );
		map.clear();
		pi.setTotal(total);
		pi.setRows(returnDrProductInvest);
		map.put("page", pi);
		map.put("alreadyRaiseAmount", productInfo.getAlreadyRaiseAmount());
		BaseResult br = new BaseResult();
		br.setMap(map);
		return br;
	}

	@Override
	public BigDecimal selectInvestSumByParam(Map<String, Object> map) {
		return drProductInvestDAO.selectInvestSumByParam(map);
	}

	@Override
	public DrProductInvest selectByPrimaryKey(Integer id) {
		return drProductInvestDAO.selectByPrimaryKey(id);
	}

	@Override
	public Integer selectInvestCountByMap(Map<String, Object> map) {
		return drProductInvestDAO.selectInvestCountByMap(map);
	}

	@Override
	public List<Map<String, Object>> selectInvestTopGroupByUid(Map<String, Object> map) {
		return drProductInvestDAO.selectInvestTopGroupByUid(map);
	}

	@Override
	public Map<String, Object> selectUserLastInvestmentInfo(Integer uid) {
		return drProductInvestDAO.selectUserLastInvestmentInfo(uid);
	}

	@Override
	public void sendTicket(DrMember member, BigDecimal amount) throws Exception {
		if (amount.compareTo(new BigDecimal(2000)) >= 0) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.clear();
			map.put("uid", member.getUid());
			map.put("deadline", 15);
			map.put("amount", 2000);
			List<DrProductInvest> investList = drProductInvestDAO.selectInvestList(map);
			if (investList.size() == 1) {
				map.clear();
				map.put("toFrom", member.getToFrom());
				map.put("now", investList.get(0).getInvestTime());
				List<DrGiftCardSetUp> setUplist = drGiftCardSetUpDAO.getEfficaciousDrGiftCardSetUpList(map);
				if (!Utils.isEmptyList(setUplist)) {
					for (DrGiftCardSetUp setup : setUplist) {
						map.clear();
						map.put("parentId", setup.getId());
						map.put("limit", setup.getOnceQty());
						DrGiftCardSetUpDetail giftCardDetail = drGiftCardSetUpDetailDAO.getDrGiftCardSetUpDetailBySetUpId(map);
						if (Utils.isObjectNotEmpty(giftCardDetail)) {
							String code = giftCardDetail.getGiftCard();
							map.clear();
							map.put("ids", giftCardDetail.getIds());
							map.put("uid", member.getUid());
							map.put("investId", investList.get(0).getId());
							drGiftCardSetUpDetailDAO.updateGiftCardSetUpDetailMap(map);
							DrMemberMsg msg = new DrMemberMsg(member.getUid(),0, 2, "0元看电影", new Date(), 0, 0,
									redisClientTemplate.getProperties("ticketMsg").replace("${1}", code));
							drMemberMsgDAO.insertDrMemberMsg(msg);
						}
					}

				}
			}
		}
	}


	@Override
	public List<Map<String, Object>> rrlQueryInvestList(Map<String, Object> param) throws Exception {
		List<Map<String, Object>> list = drProductInvestDAO.rrlQueryInvestList(param);
		Map<String, Object> resultMap;
		List<Map<String, Object>> resultList = new ArrayList<Map<String,Object>>();
		for (Iterator iterator = list.iterator(); iterator.hasNext();) {
			Map<String, Object> map = (Map<String, Object>) iterator.next();
			resultMap = new HashMap<String, Object>();
			resultMap.put("User_name", Utils.getHanyuToPinyin(map.get("realName").toString()));
			resultMap.put("Order_no", map.get("id"));
			resultMap.put("Pro_name", map.get("fullName"));
			resultMap.put("Pro_id", map.get("pid"));
			resultMap.put("Invest_money", map.get("amount"));
			resultMap.put("Actual_invest_money", map.get("factAmount"));
			resultMap.put("Rate", map.get("rate"));
			resultMap.put("Invest_start_date", map.get("investTime"));
			resultMap.put("Invest_end_date",  Utils.parse(Utils.format(Utils.getDayNumOfAppointDate(Utils.format(map.get("expireDate").toString(), "yyyy-MM-dd"),1),"yyyy-MM-dd 23:59:59"),"yyyy-MM-dd HH:mm:ss"));
			resultMap.put("Invest_full_scale_date", map.get("fullDate"));
			resultMap.put("Commission_date", Utils.parse(Utils.format(Utils.getDayNumOfAppointDate(Utils.format(map.get("expireDate").toString(), "yyyy-MM-dd"),1),"yyyy-MM-dd 23:59:59"),"yyyy-MM-dd HH:mm:ss"));
			resultMap.put("Cust_key", map.get("uid"));
			resultList.add(resultMap);
		}
		return resultList;
	}

	@Override
	public BigDecimal getAnnualInvestSumByParam(Map<String, Object> map) {
		return drProductInvestDAO.getAnnualInvestSumByParam(map);
	}

	@Override
	public BigDecimal selectAllProductInvest(Map<String, Object> map) {
		// TODO Auto-generated method stub
		return drProductInvestDAO.selectAllProductInvest(map);
	}

	/**
	 * 计算投资金额以及优惠券可获得收益
	 * @param info 产品
	 * @param invest 投资记录
	 * @param repairRate 补标利率
	 * @return balanceProfit 返还到账户余额的收益，interestProfit 利息收益
	 * @throws SQLException
	 */
	private BigDecimal getInvestProfit(DrProductInfo info, DrProductInvest invest, BigDecimal repairRate)throws Exception{
		BigDecimal interestProfit = BigDecimal.ZERO;//应得总利息
		Integer deadline =info.getDeadline();
		if(invest.getFid() != null){//使用优惠券
			DrMemberFavourable dmf = drMemberFavourableDAO.selectByPrimaryKey(invest.getFid());
			if(dmf.getType() == 1){//红包
				BigDecimal dayRate = Utils.nwdDivide(Utils.nwdDivide(info.getRate().add(info.getActivityRate()).add(repairRate),100), 360);//日息
				interestProfit = invest.getAmount().multiply(dayRate).multiply(new BigDecimal(deadline)).setScale(2, BigDecimal.ROUND_FLOOR);
			}else if(dmf.getType() == 2){//加息券
				BigDecimal dayRate = Utils.nwdDivide(Utils.nwdDivide(info.getRate().add(info.getActivityRate())
						.add(dmf.getRaisedRates()).add(repairRate),100), 360);//日息（包含加息券）
				interestProfit = invest.getAmount()
						.multiply(dayRate).multiply(new BigDecimal(deadline)).setScale(2, BigDecimal.ROUND_FLOOR);

			}else if(dmf.getType() == 3){//体验金
				BigDecimal dayRate = Utils.nwdDivide(Utils.nwdDivide(info.getRate().add(info.getActivityRate()).add(repairRate),100), 360);//日息
				interestProfit = dmf.getAmount().add(invest.getAmount())
						.multiply(dayRate).multiply(new BigDecimal(deadline)).setScale(2, BigDecimal.ROUND_FLOOR);

			}else if(dmf.getType() ==4){//翻倍券
				BigDecimal dayRate = Utils.nwdDivide(Utils.nwdDivide(info.getRate().multiply(dmf.getMultiple())
						.add(info.getActivityRate()).add(repairRate),100), 360);//日息（包含翻倍金）
				BigDecimal dayRate1 = Utils.nwdDivide(Utils.nwdDivide(info.getRate()
						.add(info.getActivityRate()).add(repairRate),100), 360);//日息(不包含翻倍金)
				interestProfit =invest.getAmount()
						.multiply(dayRate).multiply(new BigDecimal(deadline)).setScale(2, BigDecimal.ROUND_FLOOR);
			}
		}else{
			BigDecimal dayRate = Utils.nwdDivide(Utils.nwdDivide(info.getRate().add(info.getActivityRate()).add(repairRate),100), 360);//日息
			interestProfit = invest.getAmount().multiply(dayRate).multiply(new BigDecimal(deadline)).setScale(2, BigDecimal.ROUND_FLOOR);
		}
		return interestProfit;
	}

	

}
